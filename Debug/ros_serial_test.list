
ros_serial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064ec  080064ec  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f4  080064f4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be0  20000080  08006580  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c60  08006580  00020c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a0b  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aec  00000000  00000000  00032afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  000355f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096e  00000000  00000000  00036250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002734b  00000000  00000000  00036bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a67  00000000  00000000  0005df09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed053  00000000  00000000  0006e970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034c8  00000000  00000000  0015b9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0015ee8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800626c 	.word	0x0800626c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800626c 	.word	0x0800626c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <MX_DMA_Init+0x48>)
 80004dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004de:	4a0f      	ldr	r2, [pc, #60]	; (800051c <MX_DMA_Init+0x48>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6493      	str	r3, [r2, #72]	; 0x48
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <MX_DMA_Init+0x48>)
 80004e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	2010      	movs	r0, #16
 80004f8:	f002 fa5f 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004fc:	2010      	movs	r0, #16
 80004fe:	f002 fa78 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	2011      	movs	r0, #17
 8000508:	f002 fa57 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800050c:	2011      	movs	r0, #17
 800050e:	f002 fa70 	bl	80029f2 <HAL_NVIC_EnableIRQ>

}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000

08000520 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <MX_GPIO_Init+0x5c>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a14      	ldr	r2, [pc, #80]	; (800057c <MX_GPIO_Init+0x5c>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <MX_GPIO_Init+0x5c>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_GPIO_Init+0x5c>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <MX_GPIO_Init+0x5c>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_GPIO_Init+0x5c>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_GPIO_Init+0x5c>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a08      	ldr	r2, [pc, #32]	; (800057c <MX_GPIO_Init+0x5c>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_GPIO_Init+0x5c>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f002 f89e 	bl	80026c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f80b 	bl	80005a2 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f7ff ffc8 	bl	8000520 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f7ff ffa0 	bl	80004d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000594:	f001 ff7c 	bl	8002490 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup(); // from ros serial example
 8000598:	f001 f976 	bl	8001888 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop(); // from ros serial example
 800059c:	f001 f984 	bl	80018a8 <loop>
 80005a0:	e7fc      	b.n	800059c <main+0x1c>

080005a2 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b096      	sub	sp, #88	; 0x58
 80005a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2244      	movs	r2, #68	; 0x44
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f005 fd08 	bl	8005fc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80005c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80005c8:	f002 fe5c 	bl	8003284 <HAL_PWREx_ControlVoltageScaling>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf14      	ite	ne
 80005d2:	2301      	movne	r3, #1
 80005d4:	2300      	moveq	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80005dc:	f000 f841 	bl	8000662 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ea:	2310      	movs	r3, #16
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f2:	2302      	movs	r3, #2
 80005f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 26;
 80005fa:	231a      	movs	r3, #26
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fe:	2307      	movs	r3, #7
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000606:	2304      	movs	r3, #4
 8000608:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fe8e 	bl	8003330 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	bf14      	ite	ne
 800061a:	2301      	movne	r3, #1
 800061c:	2300      	moveq	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000624:	f000 f81d 	bl	8000662 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2303      	movs	r3, #3
 800062e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	2104      	movs	r1, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fa51 	bl	8003ae8 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000656:	f000 f804 	bl	8000662 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3758      	adds	r7, #88	; 0x58
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000666:	b672      	cpsid	i
}
 8000668:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066a:	e7fe      	b.n	800066a <Error_Handler+0x8>

0800066c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <_ZN3ros3MsgC1Ev+0x1c>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	08006494 	.word	0x08006494

080006b0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
      data()
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffe8 	bl	8000690 <_ZN3ros3MsgC1Ev>
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3304      	adds	r3, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffce 	bl	800066c <_ZN3ros4TimeC1Ev>
    {
    }
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	0800647c 	.word	0x0800647c

080006e0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6859      	ldr	r1, [r3, #4]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	b2ca      	uxtb	r2, r1
 80006fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	0a19      	lsrs	r1, r3, #8
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3301      	adds	r3, #1
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	4413      	add	r3, r2
 800070a:	b2ca      	uxtb	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	0c19      	lsrs	r1, r3, #16
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3302      	adds	r3, #2
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	4413      	add	r3, r2
 800071c:	b2ca      	uxtb	r2, r1
 800071e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	0e19      	lsrs	r1, r3, #24
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3303      	adds	r3, #3
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	4413      	add	r3, r2
 800072e:	b2ca      	uxtb	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3304      	adds	r3, #4
 8000736:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6899      	ldr	r1, [r3, #8]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	4413      	add	r3, r2
 8000742:	b2ca      	uxtb	r2, r1
 8000744:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	0a19      	lsrs	r1, r3, #8
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	4413      	add	r3, r2
 8000754:	b2ca      	uxtb	r2, r1
 8000756:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	0c19      	lsrs	r1, r3, #16
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3302      	adds	r3, #2
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	4413      	add	r3, r2
 8000766:	b2ca      	uxtb	r2, r1
 8000768:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	0e19      	lsrs	r1, r3, #24
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3303      	adds	r3, #3
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	4413      	add	r3, r2
 8000778:	b2ca      	uxtb	r2, r1
 800077a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3304      	adds	r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
      return offset;
 8000782:	68fb      	ldr	r3, [r7, #12]
    }
 8000784:	4618      	mov	r0, r3
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	6839      	ldr	r1, [r7, #0]
 80007b6:	440b      	add	r3, r1
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	431a      	orrs	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	685a      	ldr	r2, [r3, #4]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3302      	adds	r3, #2
 80007ca:	6839      	ldr	r1, [r7, #0]
 80007cc:	440b      	add	r3, r1
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	041b      	lsls	r3, r3, #16
 80007d2:	431a      	orrs	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3303      	adds	r3, #3
 80007e0:	6839      	ldr	r1, [r7, #0]
 80007e2:	440b      	add	r3, r1
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	061b      	lsls	r3, r3, #24
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3304      	adds	r3, #4
 80007f2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3301      	adds	r3, #1
 800080a:	6839      	ldr	r1, [r7, #0]
 800080c:	440b      	add	r3, r1
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	431a      	orrs	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3302      	adds	r3, #2
 8000820:	6839      	ldr	r1, [r7, #0]
 8000822:	440b      	add	r3, r1
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	041b      	lsls	r3, r3, #16
 8000828:	431a      	orrs	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	3303      	adds	r3, #3
 8000836:	6839      	ldr	r1, [r7, #0]
 8000838:	440b      	add	r3, r1
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	061b      	lsls	r3, r3, #24
 800083e:	431a      	orrs	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3304      	adds	r3, #4
 8000848:	60fb      	str	r3, [r7, #12]
     return offset;
 800084a:	68fb      	ldr	r3, [r7, #12]
    }
 800084c:	4618      	mov	r0, r3
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	08006284 	.word	0x08006284

08000874 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	08006294 	.word	0x08006294

08000890 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fef8 	bl	8000690 <_ZN3ros3MsgC1Ev>
 80008a0:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80008b0:	609a      	str	r2, [r3, #8]
      message_type(""),
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80008b6:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80008bc:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
    {
    }
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	08006464 	.word	0x08006464
 80008d4:	080062b8 	.word	0x080062b8

080008d8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	8899      	ldrh	r1, [r3, #4]
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	683a      	ldr	r2, [r7, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	b2ca      	uxtb	r2, r1
 80008f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	889b      	ldrh	r3, [r3, #4]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b299      	uxth	r1, r3
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	3301      	adds	r3, #1
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	4413      	add	r3, r2
 8000904:	b2ca      	uxtb	r2, r1
 8000906:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	3302      	adds	r3, #2
 800090c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fc58 	bl	80001c8 <strlen>
 8000918:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	4413      	add	r3, r2
 8000920:	69b9      	ldr	r1, [r7, #24]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 ffda 	bl	80018dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3304      	adds	r3, #4
 800092c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	18d0      	adds	r0, r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	4619      	mov	r1, r3
 800093c:	f005 fb78 	bl	8006030 <memcpy>
      offset += length_topic_name;
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	4413      	add	r3, r2
 8000946:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fc3b 	bl	80001c8 <strlen>
 8000952:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	4413      	add	r3, r2
 800095a:	6979      	ldr	r1, [r7, #20]
 800095c:	4618      	mov	r0, r3
 800095e:	f000 ffbd 	bl	80018dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	18d0      	adds	r0, r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	4619      	mov	r1, r3
 8000976:	f005 fb5b 	bl	8006030 <memcpy>
      offset += length_message_type;
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	4413      	add	r3, r2
 8000980:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fc1e 	bl	80001c8 <strlen>
 800098c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	4413      	add	r3, r2
 8000994:	6939      	ldr	r1, [r7, #16]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 ffa0 	bl	80018dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	3304      	adds	r3, #4
 80009a0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	18d0      	adds	r0, r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4619      	mov	r1, r3
 80009b0:	f005 fb3e 	bl	8006030 <memcpy>
      offset += length_md5sum;
 80009b4:	69fa      	ldr	r2, [r7, #28]
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	4413      	add	r3, r2
 80009ba:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80009c2:	68f9      	ldr	r1, [r7, #12]
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	b2ca      	uxtb	r2, r1
 80009cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	0a19      	lsrs	r1, r3, #8
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3301      	adds	r3, #1
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	b2ca      	uxtb	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	0c19      	lsrs	r1, r3, #16
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3302      	adds	r3, #2
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	4413      	add	r3, r2
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	0e19      	lsrs	r1, r3, #24
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3303      	adds	r3, #3
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	b2ca      	uxtb	r2, r1
 80009fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3304      	adds	r3, #4
 8000a02:	61fb      	str	r3, [r7, #28]
      return offset;
 8000a04:	69fb      	ldr	r3, [r7, #28]
    }
 8000a06:	4618      	mov	r0, r3
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b08a      	sub	sp, #40	; 0x28
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	889b      	ldrh	r3, [r3, #4]
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	3301      	adds	r3, #1
 8000a34:	6839      	ldr	r1, [r7, #0]
 8000a36:	440b      	add	r3, r1
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	441a      	add	r2, r3
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 ff5d 	bl	800191a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	3304      	adds	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6a:	e00b      	b.n	8000a84 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a70:	441a      	add	r2, r3
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	3b01      	subs	r3, #1
 8000a76:	6839      	ldr	r1, [r7, #0]
 8000a78:	440b      	add	r3, r1
 8000a7a:	7812      	ldrb	r2, [r2, #0]
 8000a7c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	3301      	adds	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	4413      	add	r3, r2
 8000a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d3ed      	bcc.n	8000a6c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	4413      	add	r3, r2
 8000a96:	3b01      	subs	r3, #1
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	441a      	add	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	441a      	add	r2, r3
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 ff2a 	bl	800191a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	623b      	str	r3, [r7, #32]
 8000ad0:	e00b      	b.n	8000aea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	441a      	add	r2, r3
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	6839      	ldr	r1, [r7, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000ae4:	6a3b      	ldr	r3, [r7, #32]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4413      	add	r3, r2
 8000af0:	6a3a      	ldr	r2, [r7, #32]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d3ed      	bcc.n	8000ad2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4413      	add	r3, r2
 8000afc:	3b01      	subs	r3, #1
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4413      	add	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	441a      	add	r2, r3
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fef7 	bl	800191a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	3304      	adds	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	61fb      	str	r3, [r7, #28]
 8000b36:	e00b      	b.n	8000b50 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	441a      	add	r2, r3
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	6839      	ldr	r1, [r7, #0]
 8000b44:	440b      	add	r3, r1
 8000b46:	7812      	ldrb	r2, [r2, #0]
 8000b48:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4413      	add	r3, r2
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d3ed      	bcc.n	8000b38 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	3b01      	subs	r3, #1
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	441a      	add	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	6839      	ldr	r1, [r7, #0]
 8000b8a:	440a      	add	r2, r1
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	3301      	adds	r3, #1
 8000b98:	6839      	ldr	r1, [r7, #0]
 8000b9a:	440b      	add	r3, r1
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	440b      	add	r3, r1
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	3303      	adds	r3, #3
 8000bbc:	6839      	ldr	r1, [r7, #0]
 8000bbe:	440b      	add	r3, r1
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	061b      	lsls	r3, r3, #24
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	61bb      	str	r3, [r7, #24]
     return offset;
 8000bd4:	69bb      	ldr	r3, [r7, #24]
    }
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	080062bc 	.word	0x080062bc

08000bfc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	080062d8 	.word	0x080062d8

08000c18 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fd34 	bl	8000690 <_ZN3ros3MsgC1Ev>
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	601a      	str	r2, [r3, #0]
      level(0),
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	711a      	strb	r2, [r3, #4]
      msg("")
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000c38:	609a      	str	r2, [r3, #8]
    {
    }
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	0800644c 	.word	0x0800644c
 8000c48:	080062b8 	.word	0x080062b8

08000c4c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	7912      	ldrb	r2, [r2, #4]
 8000c64:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff faa9 	bl	80001c8 <strlen>
 8000c76:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fe2b 	bl	80018dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	18d0      	adds	r0, r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f005 f9c9 	bl	8006030 <memcpy>
      offset += length_msg;
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
      return offset;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	441a      	add	r2, r3
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fe1c 	bl	800191a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e00b      	b.n	8000d06 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	441a      	add	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6839      	ldr	r1, [r7, #0]
 8000cfa:	440b      	add	r3, r1
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3ed      	bcc.n	8000cee <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	441a      	add	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
     return offset;
 8000d36:	693b      	ldr	r3, [r7, #16]
    }
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	080062fc 	.word	0x080062fc

08000d5c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	08006310 	.word	0x08006310

08000d78 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fc84 	bl	8000690 <_ZN3ros3MsgC1Ev>
 8000d88:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	08006434 	.word	0x08006434

08000dd4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6859      	ldr	r1, [r3, #4]
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	b2ca      	uxtb	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	0a19      	lsrs	r1, r3, #8
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	3301      	adds	r3, #1
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	0c19      	lsrs	r1, r3, #16
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2ca      	uxtb	r2, r1
 8000e12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	0e19      	lsrs	r1, r3, #24
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	3303      	adds	r3, #3
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	b2ca      	uxtb	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	3304      	adds	r3, #4
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
 8000e30:	e02a      	b.n	8000e88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	6a3b      	ldr	r3, [r7, #32]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000e40:	6939      	ldr	r1, [r7, #16]
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	b2ca      	uxtb	r2, r1
 8000e4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	0a19      	lsrs	r1, r3, #8
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	3301      	adds	r3, #1
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	b2ca      	uxtb	r2, r1
 8000e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	0c19      	lsrs	r1, r3, #16
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	3302      	adds	r3, #2
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	b2ca      	uxtb	r2, r1
 8000e6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	0e19      	lsrs	r1, r3, #24
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	3303      	adds	r3, #3
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	b2ca      	uxtb	r2, r1
 8000e7a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	3304      	adds	r3, #4
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	3301      	adds	r3, #1
 8000e86:	623b      	str	r3, [r7, #32]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	6a3a      	ldr	r2, [r7, #32]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3cf      	bcc.n	8000e32 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6919      	ldr	r1, [r3, #16]
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b2ca      	uxtb	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	0a19      	lsrs	r1, r3, #8
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	0c19      	lsrs	r1, r3, #16
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	3302      	adds	r3, #2
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2ca      	uxtb	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	0e19      	lsrs	r1, r3, #24
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	3303      	adds	r3, #3
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b2ca      	uxtb	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3304      	adds	r3, #4
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	e02a      	b.n	8000f38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699a      	ldr	r2, [r3, #24]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000ef0:	68f9      	ldr	r1, [r7, #12]
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b2ca      	uxtb	r2, r1
 8000efa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	0a19      	lsrs	r1, r3, #8
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3301      	adds	r3, #1
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	b2ca      	uxtb	r2, r1
 8000f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	0c19      	lsrs	r1, r3, #16
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	3302      	adds	r3, #2
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	b2ca      	uxtb	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	0e19      	lsrs	r1, r3, #24
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	3303      	adds	r3, #3
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b2ca      	uxtb	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	3304      	adds	r3, #4
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	69fa      	ldr	r2, [r7, #28]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3cf      	bcc.n	8000ee2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69d9      	ldr	r1, [r3, #28]
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b2ca      	uxtb	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	0a19      	lsrs	r1, r3, #8
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	3301      	adds	r3, #1
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b2ca      	uxtb	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	0c19      	lsrs	r1, r3, #16
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2ca      	uxtb	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	0e19      	lsrs	r1, r3, #24
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	3303      	adds	r3, #3
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	3304      	adds	r3, #4
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	e027      	b.n	8000fe2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff f912 	bl	80001c8 <strlen>
 8000fa4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	6979      	ldr	r1, [r7, #20]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fc94 	bl	80018dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	18d0      	adds	r0, r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f005 f82e 	bl	8006030 <memcpy>
      offset += length_stringsi;
 8000fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	4413      	add	r3, r2
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3d2      	bcc.n	8000f92 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b08e      	sub	sp, #56	; 0x38
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001010:	3301      	adds	r3, #1
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	6a3a      	ldr	r2, [r7, #32]
 800101c:	4313      	orrs	r3, r2
 800101e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001022:	3302      	adds	r3, #2
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	6a3a      	ldr	r2, [r7, #32]
 800102e:	4313      	orrs	r3, r2
 8001030:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001034:	3303      	adds	r3, #3
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	061b      	lsls	r3, r3, #24
 800103e:	6a3a      	ldr	r2, [r7, #32]
 8001040:	4313      	orrs	r3, r2
 8001042:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001046:	3304      	adds	r3, #4
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	6a3a      	ldr	r2, [r7, #32]
 8001050:	429a      	cmp	r2, r3
 8001052:	d90a      	bls.n	800106a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f004 ff7a 	bl	8005f58 <realloc>
 8001064:	4602      	mov	r2, r0
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a3a      	ldr	r2, [r7, #32]
 800106e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
 8001074:	e035      	b.n	80010e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800107e:	6839      	ldr	r1, [r7, #0]
 8001080:	440a      	add	r2, r1
 8001082:	7812      	ldrb	r2, [r2, #0]
 8001084:	4313      	orrs	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108c:	3301      	adds	r3, #1
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	4313      	orrs	r3, r2
 8001098:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109e:	3302      	adds	r3, #2
 80010a0:	6839      	ldr	r1, [r7, #0]
 80010a2:	440b      	add	r3, r1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	041b      	lsls	r3, r3, #16
 80010a8:	4313      	orrs	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b0:	3303      	adds	r3, #3
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	440b      	add	r3, r1
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	4313      	orrs	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80010c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c6:	3304      	adds	r3, #4
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80010dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010de:	3301      	adds	r3, #1
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3c4      	bcc.n	8001076 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80010ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f8:	3301      	adds	r3, #1
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4313      	orrs	r3, r2
 8001106:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	3302      	adds	r3, #2
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	4413      	add	r3, r2
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	4313      	orrs	r3, r2
 8001118:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800111a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111c:	3303      	adds	r3, #3
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	061b      	lsls	r3, r3, #24
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	4313      	orrs	r3, r2
 800112a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	3304      	adds	r3, #4
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	429a      	cmp	r2, r3
 800113a:	d90a      	bls.n	8001152 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	699a      	ldr	r2, [r3, #24]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f004 ff06 	bl	8005f58 <realloc>
 800114c:	4602      	mov	r2, r0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800115c:	e035      	b.n	80011ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	440a      	add	r2, r1
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001174:	3301      	adds	r3, #1
 8001176:	6839      	ldr	r1, [r7, #0]
 8001178:	440b      	add	r3, r1
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001186:	3302      	adds	r3, #2
 8001188:	6839      	ldr	r1, [r7, #0]
 800118a:	440b      	add	r3, r1
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	041b      	lsls	r3, r3, #16
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001198:	3303      	adds	r3, #3
 800119a:	6839      	ldr	r1, [r7, #0]
 800119c:	440b      	add	r3, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	061b      	lsls	r3, r3, #24
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80011ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ae:	3304      	adds	r3, #4
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	3214      	adds	r2, #20
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c6:	3301      	adds	r3, #1
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3c4      	bcc.n	800115e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80011d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80011de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e0:	3301      	adds	r3, #1
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80011f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f2:	3302      	adds	r3, #2
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001204:	3303      	adds	r3, #3
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	061b      	lsls	r3, r3, #24
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001216:	3304      	adds	r3, #4
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	429a      	cmp	r2, r3
 8001222:	d90a      	bls.n	800123a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4619      	mov	r1, r3
 800122e:	4610      	mov	r0, r2
 8001230:	f004 fe92 	bl	8005f58 <realloc>
 8001234:	4602      	mov	r2, r0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
 8001244:	e03e      	b.n	80012c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	441a      	add	r2, r3
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fb61 	bl	800191a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125a:	3304      	adds	r3, #4
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
 8001262:	e00b      	b.n	800127c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	441a      	add	r2, r3
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	3b01      	subs	r3, #1
 800126e:	6839      	ldr	r1, [r7, #0]
 8001270:	440b      	add	r3, r1
 8001272:	7812      	ldrb	r2, [r2, #0]
 8001274:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	3301      	adds	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
 800127c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	429a      	cmp	r2, r3
 8001286:	d3ed      	bcc.n	8001264 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	3b01      	subs	r3, #1
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	4413      	add	r3, r2
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	3b01      	subs	r3, #1
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	441a      	add	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80012a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4413      	add	r3, r2
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	3220      	adds	r2, #32
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c0:	3301      	adds	r3, #1
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3bb      	bcc.n	8001246 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80012ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80012d0:	4618      	mov	r0, r3
 80012d2:	3738      	adds	r7, #56	; 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	080063d0 	.word	0x080063d0

080012f4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	08006334 	.word	0x08006334

08001310 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68d8      	ldr	r0, [r3, #12]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6891      	ldr	r1, [r2, #8]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	4798      	blx	r3
 800135c:	4603      	mov	r3, r0
  };
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
  }
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <_ZN13STM32HardwareC1Ev+0x34>)
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	200009fc 	.word	0x200009fc

080013dc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f804 	bl	80013f2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3304      	adds	r3, #4
 8001402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001406:	4619      	mov	r1, r3
 8001408:	f003 fb18 	bl	8004a3c <HAL_UART_Receive_DMA>
    }
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ffa8 	bl	800137e <_ZN13STM32Hardware10getRdmaIndEv>
 800142e:	4603      	mov	r3, r0
 8001430:	429c      	cmp	r4, r3
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d012      	beq.n	8001464 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001444:	1c59      	adds	r1, r3, #1
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	791b      	ldrb	r3, [r3, #4]
 8001452:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800145a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001464:	68fb      	ldr	r3, [r7, #12]
    }
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bd90      	pop	{r4, r7, pc}
	...

08001470 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800147e:	2b20      	cmp	r3, #32
 8001480:	d108      	bne.n	8001494 <_ZN13STM32Hardware5flushEv+0x24>
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <_ZN13STM32Hardware5flushEv+0x24>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <_ZN13STM32Hardware5flushEv+0x26>
 8001494:	2300      	movs	r3, #0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d055      	beq.n	8001546 <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <_ZN13STM32Hardware5flushEv+0xe0>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d047      	beq.n	8001540 <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d217      	bcs.n	80014f4 <_ZN13STM32Hardware5flushEv+0x84>
			len = twind - tfind;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	89fa      	ldrh	r2, [r7, #14]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f003 fa29 	bl	8004944 <HAL_UART_Transmit_DMA>
 80014f2:	e01f      	b.n	8001534 <_ZN13STM32Hardware5flushEv+0xc4>
		  }else{
			len = tbuflen - tfind;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001500:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800150c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	89fa      	ldrh	r2, [r7, #14]
 8001516:	4619      	mov	r1, r3
 8001518:	f003 fa14 	bl	8004944 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (uint8_t *)&tbuf, twind); // Complied after Eddie casted tbuf to (uint8_t *) this change made program execute properly
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800152c:	b29b      	uxth	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	f003 fa08 	bl	8004944 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
      }
    }
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000009c 	.word	0x2000009c

08001554 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156a:	bfa8      	it	ge
 800156c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001570:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001578:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	4293      	cmp	r3, r2
 8001580:	bf28      	it	cs
 8001582:	4613      	movcs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800158c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fd49 	bl	8006030 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	4413      	add	r3, r2
 80015a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d00b      	beq.n	80015d2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	18d1      	adds	r1, r2, r3
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	f004 fd2f 	bl	8006030 <memcpy>
      }

      flush();
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff ff4c 	bl	8001470 <_ZN13STM32Hardware5flushEv>
    }
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	f001 f8dc 	bl	80027a4 <HAL_GetTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
      data("")
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f844 	bl	8000690 <_ZN3ros3MsgC1Ev>
 8001608:	4a05      	ldr	r2, [pc, #20]	; (8001620 <_ZN8std_msgs6StringC1Ev+0x28>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001612:	605a      	str	r2, [r3, #4]
    {
    }
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	08006408 	.word	0x08006408
 8001624:	080062b8 	.word	0x080062b8

08001628 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fdc4 	bl	80001c8 <strlen>
 8001640:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	4413      	add	r3, r2
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f946 	bl	80018dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3304      	adds	r3, #4
 8001654:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	18d0      	adds	r0, r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	4619      	mov	r1, r3
 8001664:	f004 fce4 	bl	8006030 <memcpy>
      offset += length_data;
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	4413      	add	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001670:	68fb      	ldr	r3, [r7, #12]
    }
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	441a      	add	r2, r3
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f940 	bl	800191a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	3304      	adds	r3, #4
 800169e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e00b      	b.n	80016be <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	441a      	add	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	440b      	add	r3, r1
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d3ed      	bcc.n	80016a6 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	3b01      	subs	r3, #1
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	4413      	add	r3, r2
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	3b01      	subs	r3, #1
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	441a      	add	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
     return offset;
 80016ee:	693b      	ldr	r3, [r7, #16]
    }
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	08006358 	.word	0x08006358

08001714 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	08006368 	.word	0x08006368

08001730 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	08006420 	.word	0x08006420

08001750 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ffe8 	bl	8001730 <_ZN3ros15NodeHandleBase_C1Ev>
 8001760:	4a36      	ldr	r2, [pc, #216]	; (800183c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3304      	adds	r3, #4
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fe1a 	bl	80013a4 <_ZN13STM32HardwareC1Ev>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f004 fc12 	bl	8005fc6 <memset>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 fc09 	bl	8005fc6 <memset>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80017ba:	2264      	movs	r2, #100	; 0x64
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fc01 	bl	8005fc6 <memset>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80017ca:	2264      	movs	r2, #100	; 0x64
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f004 fbf9 	bl	8005fc6 <memset>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff faa4 	bl	8000d78 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	080063f4 	.word	0x080063f4

08001840 <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "1000:500:250:100:250:500:1000:1250";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_UART_TxCpltCallback+0x20>)
 800184a:	f000 f88c 	bl	8001966 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800184e:	4603      	mov	r3, r0
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fe0d 	bl	8001470 <_ZN13STM32Hardware5flushEv>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200000a0 	.word	0x200000a0

08001864 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <HAL_UART_RxCpltCallback+0x20>)
 800186e:	f000 f87a 	bl	8001966 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001872:	4603      	mov	r3, r0
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fdbc 	bl	80013f2 <_ZN13STM32Hardware10reset_rbufEv>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200000a0 	.word	0x200000a0

08001888 <setup>:

void setup(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  nh.initNode();
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <setup+0x18>)
 800188e:	f000 f876 	bl	800197e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 8001892:	4904      	ldr	r1, [pc, #16]	; (80018a4 <setup+0x1c>)
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <setup+0x18>)
 8001896:	f000 f88f 	bl	80019b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200000a0 	.word	0x200000a0
 80018a4:	200009e4 	.word	0x200009e4

080018a8 <loop>:

void loop(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

  str_msg.data = hello;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <loop+0x24>)
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <loop+0x28>)
 80018b0:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 80018b2:	4906      	ldr	r1, [pc, #24]	; (80018cc <loop+0x24>)
 80018b4:	4807      	ldr	r0, [pc, #28]	; (80018d4 <loop+0x2c>)
 80018b6:	f7ff fd42 	bl	800133e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 80018ba:	4807      	ldr	r0, [pc, #28]	; (80018d8 <loop+0x30>)
 80018bc:	f000 f8ac 	bl	8001a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(100);
 80018c0:	2064      	movs	r0, #100	; 0x64
 80018c2:	f000 ff7b 	bl	80027bc <HAL_Delay>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200009dc 	.word	0x200009dc
 80018d0:	20000000 	.word	0x20000000
 80018d4:	200009e4 	.word	0x200009e4
 80018d8:	200000a0 	.word	0x200000a0

080018dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e00c      	b.n	8001906 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	fa22 f103 	lsr.w	r1, r2, r3
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	b2ca      	uxtb	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3301      	adds	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d9ef      	bls.n	80018ec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e010      	b.n	8001952 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	440a      	add	r2, r1
 800193a:	7812      	ldrb	r2, [r2, #0]
 800193c:	4611      	mov	r1, r2
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	00d2      	lsls	r2, r2, #3
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3301      	adds	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d9eb      	bls.n	8001930 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
  }
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fd26 	bl	80013dc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e01d      	b.n	8001a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d111      	bne.n	80019fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	60da      	str	r2, [r3, #12]
        return true;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e006      	b.n	8001a0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b18      	cmp	r3, #24
 8001a08:	ddde      	ble.n	80019c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8001a0a:	2300      	movs	r3, #0
  }
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3304      	adds	r3, #4
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fddb 	bl	80015e0 <_ZN13STM32Hardware4timeEv>
 8001a2a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d903      	bls.n	8001a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d009      	beq.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d903      	bls.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d014      	beq.n	8001a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3304      	adds	r3, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fdb4 	bl	80015e0 <_ZN13STM32Hardware4timeEv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad2      	subs	r2, r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001a84:	429a      	cmp	r2, r3
 8001a86:	bf8c      	ite	hi
 8001a88:	2301      	movhi	r3, #1
 8001a8a:	2300      	movls	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001a92:	f06f 0301 	mvn.w	r3, #1
 8001a96:	e194      	b.n	8001dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fcb9 	bl	8001414 <_ZN13STM32Hardware4readEv>
 8001aa2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f2c0 8174 	blt.w	8001d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	441a      	add	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ac2:	2b07      	cmp	r3, #7
 8001ac4:	d11e      	bne.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001acc:	1c59      	adds	r1, r3, #1
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	b2d1      	uxtb	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	460a      	mov	r2, r1
 8001ade:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1b4      	bne.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2208      	movs	r2, #8
 8001afe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b02:	e7af      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d128      	bne.n	8001b60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2bff      	cmp	r3, #255	; 0xff
 8001b12:	d10d      	bne.n	8001b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f103 0214 	add.w	r2, r3, #20
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001b2e:	e799      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3304      	adds	r3, #4
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fd53 	bl	80015e0 <_ZN13STM32Hardware4timeEv>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	bf8c      	ite	hi
 8001b48:	2301      	movhi	r3, #1
 8001b4a:	2300      	movls	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d088      	beq.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001b5a:	f06f 0301 	mvn.w	r3, #1
 8001b5e:	e130      	b.n	8001dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d118      	bne.n	8001b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2bfe      	cmp	r3, #254	; 0xfe
 8001b6e:	d107      	bne.n	8001b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b7e:	e771      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f47f af68 	bne.w	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f918 	bl	8001dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001b9a:	e763      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d113      	bne.n	8001bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001bcc:	e74a      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d110      	bne.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	441a      	add	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001bf8:	e734      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d116      	bne.n	8001c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001c0a:	425a      	negs	r2, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	bf58      	it	pl
 8001c12:	4253      	negpl	r3, r2
 8001c14:	2bff      	cmp	r3, #255	; 0xff
 8001c16:	d107      	bne.n	8001c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c26:	e71d      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c30:	e718      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d10f      	bne.n	8001c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001c5a:	e703      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d117      	bne.n	8001c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	441a      	add	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f47f aeec 	bne.w	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2208      	movs	r2, #8
 8001c90:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c94:	e6e6      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	f47f aee1 	bne.w	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001cb0:	425a      	negs	r2, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	bf58      	it	pl
 8001cb8:	4253      	negpl	r3, r2
 8001cba:	2bff      	cmp	r3, #255	; 0xff
 8001cbc:	f47f aed2 	bne.w	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d110      	bne.n	8001cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f87d 	bl	8001dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f898 	bl	8001e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	e06a      	b.n	8001dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001cf2:	2b0a      	cmp	r3, #10
 8001cf4:	d107      	bne.n	8001d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f960 	bl	8001fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001d04:	e6ae      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d0c:	2b06      	cmp	r3, #6
 8001d0e:	d10e      	bne.n	8001d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f7ff f969 	bl	8000ff6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001d2c:	e69a      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d34:	2b0b      	cmp	r3, #11
 8001d36:	d104      	bne.n	8001d42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001d40:	e690      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d48:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f43f ae84 	beq.w	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d62:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d6c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d76:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4798      	blx	r3
    while (true)
 8001d92:	e667      	b.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001d94:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00f      	beq.n	8001dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d906      	bls.n	8001dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f809 	bl	8001dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001dc0:	2300      	movs	r3, #0
  }
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fc6a 	bl	80006b0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f107 020c 	add.w	r2, r7, #12
 8001de6:	210a      	movs	r1, #10
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
    rt_time = hardware_.time();
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3304      	adds	r3, #4
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fbf5 	bl	80015e0 <_ZN13STM32Hardware4timeEv>
 8001df6:	4602      	mov	r2, r0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001e06:	b590      	push	{r4, r7, lr}
 8001e08:	b08b      	sub	sp, #44	; 0x2c
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fd3c 	bl	8000890 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1c:	e062      	b.n	8001ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d056      	beq.n	8001ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3308      	adds	r3, #8
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4798      	blx	r3
 8001e80:	4603      	mov	r3, r0
 8001e82:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	330c      	adds	r3, #12
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4608      	mov	r0, r1
 8001eac:	4798      	blx	r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681c      	ldr	r4, [r3, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fa4a 	bl	8001366 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	2b18      	cmp	r3, #24
 8001ee8:	dd99      	ble.n	8001e1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	e05e      	b.n	8001fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d053      	beq.n	8001fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f16:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f26:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f32:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3308      	adds	r3, #8
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4608      	mov	r0, r1
 8001f42:	4798      	blx	r3
 8001f44:	4603      	mov	r3, r0
 8001f46:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	330c      	adds	r3, #12
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4608      	mov	r0, r1
 8001f68:	4798      	blx	r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f72:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681c      	ldr	r4, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3304      	adds	r3, #4
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4798      	blx	r3
 8001f9c:	4601      	mov	r1, r0
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	3301      	adds	r3, #1
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	2b18      	cmp	r3, #24
 8001fb2:	dd9d      	ble.n	8001ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001fbc:	bf00      	nop
 8001fbe:	372c      	adds	r7, #44	; 0x2c
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd90      	pop	{r4, r7, pc}

08001fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fb6c 	bl	80006b0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff faff 	bl	80015e0 <_ZN13STM32Hardware4timeEv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	6839      	ldr	r1, [r7, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fbcb 	bl	8000790 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	4915      	ldr	r1, [pc, #84]	; (8002054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002000:	fba1 1303 	umull	r1, r3, r1, r3
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800200a:	6939      	ldr	r1, [r7, #16]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002010:	fba3 0302 	umull	r0, r3, r3, r2
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800201a:	fb00 f303 	mul.w	r3, r0, r3
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	440b      	add	r3, r1
 8002028:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	3304      	adds	r3, #4
 8002030:	4619      	mov	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8a6 	bl	8002184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3304      	adds	r3, #4
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff facf 	bl	80015e0 <_ZN13STM32Hardware4timeEv>
 8002042:	4602      	mov	r2, r0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	10624dd3 	.word	0x10624dd3
 8002058:	000f4240 	.word	0x000f4240

0800205c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b63      	cmp	r3, #99	; 0x63
 800206c:	dd09      	ble.n	8002082 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002074:	f083 0301 	eor.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800207e:	2300      	movs	r3, #0
 8002080:	e079      	b.n	8002176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800208e:	3207      	adds	r2, #7
 8002090:	4611      	mov	r1, r2
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4798      	blx	r3
 8002096:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	22ff      	movs	r2, #255	; 0xff
 800209c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	22fe      	movs	r2, #254	; 0xfe
 80020a4:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80020ce:	4413      	add	r3, r2
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	121b      	asrs	r3, r3, #8
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80020fa:	2305      	movs	r3, #5
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	e00c      	b.n	800211a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4413      	add	r3, r2
 8002106:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4413      	add	r3, r2
 8002112:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	3301      	adds	r3, #1
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3306      	adds	r3, #6
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	429a      	cmp	r2, r3
 8002122:	dded      	ble.n	8002100 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	3307      	adds	r3, #7
 8002128:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	425a      	negs	r2, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	bf58      	it	pl
 8002134:	4253      	negpl	r3, r2
 8002136:	b2da      	uxtb	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1c59      	adds	r1, r3, #1
 800213c:	6179      	str	r1, [r7, #20]
 800213e:	43d2      	mvns	r2, r2
 8002140:	b2d1      	uxtb	r1, r2
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4413      	add	r3, r2
 8002146:	460a      	mov	r2, r1
 8002148:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002152:	dc0a      	bgt.n	800216a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1d18      	adds	r0, r3, #4
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4619      	mov	r1, r3
 8002162:	f7ff f9f7 	bl	8001554 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	e005      	b.n	8002176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800216a:	4905      	ldr	r1, [pc, #20]	; (8002180 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f849 	bl	8002204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002176:	4618      	mov	r0, r3
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	0800638c 	.word	0x0800638c

08002184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fa24 	bl	80015e0 <_ZN13STM32Hardware4timeEv>
 8002198:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4915      	ldr	r1, [pc, #84]	; (80021f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80021a2:	fba1 1303 	umull	r1, r3, r1, r3
 80021a6:	099b      	lsrs	r3, r3, #6
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	1e5a      	subs	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6859      	ldr	r1, [r3, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80021ba:	fba3 0302 	umull	r0, r3, r3, r2
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021c4:	fb00 f303 	mul.w	r3, r0, r3
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	1aca      	subs	r2, r1, r3
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80021d4:	4413      	add	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f000 f924 	bl	8002438 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	10624dd3 	.word	0x10624dd3
 80021fc:	000f4240 	.word	0x000f4240
 8002200:	3b9aca00 	.word	0x3b9aca00

08002204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	2103      	movs	r1, #3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f804 	bl	8002220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	460b      	mov	r3, r1
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fcf0 	bl	8000c18 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002238:	7afb      	ldrb	r3, [r7, #11]
 800223a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f107 0214 	add.w	r2, r7, #20
 800224a:	2107      	movs	r1, #7
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	4798      	blx	r3
  }
 8002250:	bf00      	nop
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_Z41__static_initialization_and_destruction_0ii>:
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d110      	bne.n	800228a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226e:	4293      	cmp	r3, r2
 8002270:	d10b      	bne.n	800228a <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8002272:	4808      	ldr	r0, [pc, #32]	; (8002294 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002274:	f7ff fa6c 	bl	8001750 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002278:	4807      	ldr	r0, [pc, #28]	; (8002298 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800227a:	f7ff f9bd 	bl	80015f8 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800227e:	2300      	movs	r3, #0
 8002280:	4a05      	ldr	r2, [pc, #20]	; (8002298 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002282:	4906      	ldr	r1, [pc, #24]	; (800229c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002284:	4806      	ldr	r0, [pc, #24]	; (80022a0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002286:	f7ff f843 	bl	8001310 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200000a0 	.word	0x200000a0
 8002298:	200009dc 	.word	0x200009dc
 800229c:	080063c8 	.word	0x080063c8
 80022a0:	200009e4 	.word	0x200009e4

080022a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    return configured_;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <_GLOBAL__sub_I_nh>:
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff ffc6 	bl	8002258 <_Z41__static_initialization_and_destruction_0ii>
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_MspInit+0x44>)
 80022d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022da:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_MspInit+0x44>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6613      	str	r3, [r2, #96]	; 0x60
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_MspInit+0x44>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_MspInit+0x44>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_MspInit+0x44>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6593      	str	r3, [r2, #88]	; 0x58
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_MspInit+0x44>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800231c:	e7fe      	b.n	800231c <NMI_Handler+0x4>

0800231e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <HardFault_Handler+0x4>

08002324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <MemManage_Handler+0x4>

0800232a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <BusFault_Handler+0x4>

08002330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <UsageFault_Handler+0x4>

08002336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002364:	f000 fa0a 	bl	800277c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}

0800236c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <DMA1_Channel6_IRQHandler+0x10>)
 8002372:	f000 fcf0 	bl	8002d56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000a84 	.word	0x20000a84

08002380 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <DMA1_Channel7_IRQHandler+0x10>)
 8002386:	f000 fce6 	bl	8002d56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000acc 	.word	0x20000acc

08002394 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <USART2_IRQHandler+0x10>)
 800239a:	f002 fb9b 	bl	8004ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200009fc 	.word	0x200009fc

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f003 fdfe 	bl	8005fd8 <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20018000 	.word	0x20018000
 8002408:	00000400 	.word	0x00000400
 800240c:	200009f8 	.word	0x200009f8
 8002410:	20000c60 	.word	0x20000c60

08002414 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0a5a      	lsrs	r2, r3, #9
 8002448:	490f      	ldr	r1, [pc, #60]	; (8002488 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800244a:	fba1 1202 	umull	r1, r2, r1, r2
 800244e:	09d2      	lsrs	r2, r2, #7
 8002450:	490e      	ldr	r1, [pc, #56]	; (800248c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8002452:	fb01 f202 	mul.w	r2, r1, r2
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0a5b      	lsrs	r3, r3, #9
 8002460:	4a09      	ldr	r2, [pc, #36]	; (8002488 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	09db      	lsrs	r3, r3, #7
 8002468:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	441a      	add	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	601a      	str	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	00044b83 	.word	0x00044b83
 800248c:	3b9aca00 	.word	0x3b9aca00

08002490 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 8002496:	4a15      	ldr	r2, [pc, #84]	; (80024ec <MX_USART2_UART_Init+0x5c>)
 8002498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 800249c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80024a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 80024b6:	220c      	movs	r2, #12
 80024b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024d2:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_USART2_UART_Init+0x58>)
 80024d4:	f002 f9e8 	bl	80048a8 <HAL_UART_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80024de:	f7fe f8c0 	bl	8000662 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200009fc 	.word	0x200009fc
 80024ec:	40004400 	.word	0x40004400

080024f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0ac      	sub	sp, #176	; 0xb0
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2288      	movs	r2, #136	; 0x88
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f003 fd58 	bl	8005fc6 <memset>
  if(uartHandle->Instance==USART2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <HAL_UART_MspInit+0x164>)
 800251c:	4293      	cmp	r3, r2
 800251e:	f040 8095 	bne.w	800264c <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002522:	2302      	movs	r3, #2
 8002524:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002526:	2300      	movs	r3, #0
 8002528:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fcfe 	bl	8003f30 <HAL_RCCEx_PeriphCLKConfig>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800253a:	f7fe f892 	bl	8000662 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800253e:	4b46      	ldr	r3, [pc, #280]	; (8002658 <HAL_UART_MspInit+0x168>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	4a45      	ldr	r2, [pc, #276]	; (8002658 <HAL_UART_MspInit+0x168>)
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	6593      	str	r3, [r2, #88]	; 0x58
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_UART_MspInit+0x168>)
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002556:	4b40      	ldr	r3, [pc, #256]	; (8002658 <HAL_UART_MspInit+0x168>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	4a3f      	ldr	r2, [pc, #252]	; (8002658 <HAL_UART_MspInit+0x168>)
 800255c:	f043 0308 	orr.w	r3, r3, #8
 8002560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002562:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <HAL_UART_MspInit+0x168>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800256e:	2360      	movs	r3, #96	; 0x60
 8002570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002586:	2307      	movs	r3, #7
 8002588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800258c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002590:	4619      	mov	r1, r3
 8002592:	4832      	ldr	r0, [pc, #200]	; (800265c <HAL_UART_MspInit+0x16c>)
 8002594:	f000 fcbe 	bl	8002f14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002598:	4b31      	ldr	r3, [pc, #196]	; (8002660 <HAL_UART_MspInit+0x170>)
 800259a:	4a32      	ldr	r2, [pc, #200]	; (8002664 <HAL_UART_MspInit+0x174>)
 800259c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800259e:	4b30      	ldr	r3, [pc, #192]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025a0:	2202      	movs	r2, #2
 80025a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025bc:	4b28      	ldr	r3, [pc, #160]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80025c2:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80025ce:	4824      	ldr	r0, [pc, #144]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025d0:	f000 fa2a 	bl	8002a28 <HAL_DMA_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80025da:	f7fe f842 	bl	8000662 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a1f      	ldr	r2, [pc, #124]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025e2:	675a      	str	r2, [r3, #116]	; 0x74
 80025e4:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_UART_MspInit+0x170>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_UART_MspInit+0x178>)
 80025ec:	4a1f      	ldr	r2, [pc, #124]	; (800266c <HAL_UART_MspInit+0x17c>)
 80025ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_UART_MspInit+0x178>)
 80025f2:	2202      	movs	r2, #2
 80025f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_UART_MspInit+0x178>)
 80025f8:	2210      	movs	r2, #16
 80025fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_UART_MspInit+0x178>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_UART_MspInit+0x178>)
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_UART_MspInit+0x178>)
 800260a:	2200      	movs	r2, #0
 800260c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_UART_MspInit+0x178>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_UART_MspInit+0x178>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_UART_MspInit+0x178>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002620:	4811      	ldr	r0, [pc, #68]	; (8002668 <HAL_UART_MspInit+0x178>)
 8002622:	f000 fa01 	bl	8002a28 <HAL_DMA_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 800262c:	f7fe f819 	bl	8000662 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <HAL_UART_MspInit+0x178>)
 8002634:	671a      	str	r2, [r3, #112]	; 0x70
 8002636:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <HAL_UART_MspInit+0x178>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	2026      	movs	r0, #38	; 0x26
 8002642:	f000 f9ba 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002646:	2026      	movs	r0, #38	; 0x26
 8002648:	f000 f9d3 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800264c:	bf00      	nop
 800264e:	37b0      	adds	r7, #176	; 0xb0
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40004400 	.word	0x40004400
 8002658:	40021000 	.word	0x40021000
 800265c:	48000c00 	.word	0x48000c00
 8002660:	20000a84 	.word	0x20000a84
 8002664:	4002006c 	.word	0x4002006c
 8002668:	20000acc 	.word	0x20000acc
 800266c:	40020080 	.word	0x40020080

08002670 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002674:	f7ff fece 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <LoopForever+0x6>)
  ldr r1, =_edata
 800267a:	490d      	ldr	r1, [pc, #52]	; (80026b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <LoopForever+0xe>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002680:	e002      	b.n	8002688 <LoopCopyDataInit>

08002682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002686:	3304      	adds	r3, #4

08002688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800268c:	d3f9      	bcc.n	8002682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002690:	4c0a      	ldr	r4, [pc, #40]	; (80026bc <LoopForever+0x16>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002694:	e001      	b.n	800269a <LoopFillZerobss>

08002696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002698:	3204      	adds	r2, #4

0800269a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800269c:	d3fb      	bcc.n	8002696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269e:	f003 fca1 	bl	8005fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026a2:	f7fd ff6d 	bl	8000580 <main>

080026a6 <LoopForever>:

LoopForever:
    b LoopForever
 80026a6:	e7fe      	b.n	80026a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80026b4:	08006500 	.word	0x08006500
  ldr r2, =_sbss
 80026b8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80026bc:	20000c60 	.word	0x20000c60

080026c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026c0:	e7fe      	b.n	80026c0 <ADC1_2_IRQHandler>
	...

080026c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_Init+0x3c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <HAL_Init+0x3c>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026da:	2003      	movs	r0, #3
 80026dc:	f000 f962 	bl	80029a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026e0:	2000      	movs	r0, #0
 80026e2:	f000 f80f 	bl	8002704 <HAL_InitTick>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	71fb      	strb	r3, [r7, #7]
 80026f0:	e001      	b.n	80026f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026f2:	f7ff fded 	bl	80022d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026f6:	79fb      	ldrb	r3, [r7, #7]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40022000 	.word	0x40022000

08002704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <HAL_InitTick+0x6c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d023      	beq.n	8002760 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002718:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_InitTick+0x70>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b14      	ldr	r3, [pc, #80]	; (8002770 <HAL_InitTick+0x6c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f96d 	bl	8002a0e <HAL_SYSTICK_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d809      	bhi.n	8002754 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002740:	2200      	movs	r2, #0
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f000 f937 	bl	80029ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_InitTick+0x74>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e007      	b.n	8002764 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e004      	b.n	8002764 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e001      	b.n	8002764 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000002c 	.word	0x2000002c
 8002774:	20000024 	.word	0x20000024
 8002778:	20000028 	.word	0x20000028

0800277c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_IncTick+0x20>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_IncTick+0x24>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_IncTick+0x24>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2000002c 	.word	0x2000002c
 80027a0:	20000b14 	.word	0x20000b14

080027a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return uwTick;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_GetTick+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000b14 	.word	0x20000b14

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff ffee 	bl	80027a4 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e2:	bf00      	nop
 80027e4:	f7ff ffde 	bl	80027a4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2000002c 	.word	0x2000002c

08002804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800282c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db0b      	blt.n	8002892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4907      	ldr	r1, [pc, #28]	; (80028a0 <__NVIC_EnableIRQ+0x38>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2001      	movs	r0, #1
 800288a:	fa00 f202 	lsl.w	r2, r0, r2
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	db0a      	blt.n	80028ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	490c      	ldr	r1, [pc, #48]	; (80028f0 <__NVIC_SetPriority+0x4c>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	0112      	lsls	r2, r2, #4
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	440b      	add	r3, r1
 80028c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028cc:	e00a      	b.n	80028e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4908      	ldr	r1, [pc, #32]	; (80028f4 <__NVIC_SetPriority+0x50>)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	3b04      	subs	r3, #4
 80028dc:	0112      	lsls	r2, r2, #4
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	440b      	add	r3, r1
 80028e2:	761a      	strb	r2, [r3, #24]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000e100 	.word	0xe000e100
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f1c3 0307 	rsb	r3, r3, #7
 8002912:	2b04      	cmp	r3, #4
 8002914:	bf28      	it	cs
 8002916:	2304      	movcs	r3, #4
 8002918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3304      	adds	r3, #4
 800291e:	2b06      	cmp	r3, #6
 8002920:	d902      	bls.n	8002928 <NVIC_EncodePriority+0x30>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3b03      	subs	r3, #3
 8002926:	e000      	b.n	800292a <NVIC_EncodePriority+0x32>
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	401a      	ands	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	43d9      	mvns	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	4313      	orrs	r3, r2
         );
}
 8002952:	4618      	mov	r0, r3
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002970:	d301      	bcc.n	8002976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002972:	2301      	movs	r3, #1
 8002974:	e00f      	b.n	8002996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <SysTick_Config+0x40>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297e:	210f      	movs	r1, #15
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	f7ff ff8e 	bl	80028a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <SysTick_Config+0x40>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <SysTick_Config+0x40>)
 8002990:	2207      	movs	r2, #7
 8002992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	e000e010 	.word	0xe000e010

080029a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff29 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029cc:	f7ff ff3e 	bl	800284c <__NVIC_GetPriorityGrouping>
 80029d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f7ff ff8e 	bl	80028f8 <NVIC_EncodePriority>
 80029dc:	4602      	mov	r2, r0
 80029de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff5d 	bl	80028a4 <__NVIC_SetPriority>
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff31 	bl	8002868 <__NVIC_EnableIRQ>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffa2 	bl	8002960 <SysTick_Config>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e098      	b.n	8002b6c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <HAL_DMA_Init+0x150>)
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d80f      	bhi.n	8002a66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_DMA_Init+0x154>)
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a4b      	ldr	r2, [pc, #300]	; (8002b80 <HAL_DMA_Init+0x158>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	009a      	lsls	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a48      	ldr	r2, [pc, #288]	; (8002b84 <HAL_DMA_Init+0x15c>)
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40
 8002a64:	e00e      	b.n	8002a84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <HAL_DMA_Init+0x160>)
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a43      	ldr	r2, [pc, #268]	; (8002b80 <HAL_DMA_Init+0x158>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	009a      	lsls	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a42      	ldr	r2, [pc, #264]	; (8002b8c <HAL_DMA_Init+0x164>)
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ade:	d039      	beq.n	8002b54 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <HAL_DMA_Init+0x15c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d11a      	bne.n	8002b20 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002aea:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <HAL_DMA_Init+0x168>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f003 031c 	and.w	r3, r3, #28
 8002af6:	210f      	movs	r1, #15
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4924      	ldr	r1, [pc, #144]	; (8002b90 <HAL_DMA_Init+0x168>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_DMA_Init+0x168>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	f003 031c 	and.w	r3, r3, #28
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	491d      	ldr	r1, [pc, #116]	; (8002b90 <HAL_DMA_Init+0x168>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
 8002b1e:	e019      	b.n	8002b54 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <HAL_DMA_Init+0x16c>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f003 031c 	and.w	r3, r3, #28
 8002b2c:	210f      	movs	r1, #15
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	4917      	ldr	r1, [pc, #92]	; (8002b94 <HAL_DMA_Init+0x16c>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b3a:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <HAL_DMA_Init+0x16c>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f003 031c 	and.w	r3, r3, #28
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	4911      	ldr	r1, [pc, #68]	; (8002b94 <HAL_DMA_Init+0x16c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40020407 	.word	0x40020407
 8002b7c:	bffdfff8 	.word	0xbffdfff8
 8002b80:	cccccccd 	.word	0xcccccccd
 8002b84:	40020000 	.word	0x40020000
 8002b88:	bffdfbf8 	.word	0xbffdfbf8
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	400200a8 	.word	0x400200a8
 8002b94:	400204a8 	.word	0x400204a8

08002b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_DMA_Start_IT+0x20>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e04b      	b.n	8002c50 <HAL_DMA_Start_IT+0xb8>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d13a      	bne.n	8002c42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f95f 	bl	8002eb4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 020e 	orr.w	r2, r2, #14
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e00f      	b.n	8002c30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0204 	bic.w	r2, r2, #4
 8002c1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 020a 	orr.w	r2, r2, #10
 8002c2e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e005      	b.n	8002c4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d008      	beq.n	8002c82 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2204      	movs	r2, #4
 8002c74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e022      	b.n	8002cc8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 020e 	bic.w	r2, r2, #14
 8002c90:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f003 021c 	and.w	r2, r3, #28
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d005      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e029      	b.n	8002d4c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 020e 	bic.w	r2, r2, #14
 8002d06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	f003 021c 	and.w	r2, r3, #28
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
    }
  }
  return status;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f003 031c 	and.w	r3, r3, #28
 8002d76:	2204      	movs	r2, #4
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d026      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x7a>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d021      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0204 	bic.w	r2, r2, #4
 8002da8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f003 021c 	and.w	r2, r3, #28
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2104      	movs	r1, #4
 8002db8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d071      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002dce:	e06c      	b.n	8002eaa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	f003 031c 	and.w	r3, r3, #28
 8002dd8:	2202      	movs	r2, #2
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d02e      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xec>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d029      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 020a 	bic.w	r2, r2, #10
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	f003 021c 	and.w	r2, r3, #28
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2102      	movs	r1, #2
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d038      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e40:	e033      	b.n	8002eaa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	f003 031c 	and.w	r3, r3, #28
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d02a      	beq.n	8002eac <HAL_DMA_IRQHandler+0x156>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d025      	beq.n	8002eac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	f003 021c 	and.w	r2, r3, #28
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
}
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f003 021c 	and.w	r2, r3, #28
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d108      	bne.n	8002ef8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ef6:	e007      	b.n	8002f08 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f22:	e17f      	b.n	8003224 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	2101      	movs	r1, #1
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	4013      	ands	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8171 	beq.w	800321e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d005      	beq.n	8002f54 <HAL_GPIO_Init+0x40>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d130      	bne.n	8002fb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2203      	movs	r2, #3
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f003 0201 	and.w	r2, r3, #1
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d118      	bne.n	8002ff4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fc8:	2201      	movs	r2, #1
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	f003 0201 	and.w	r2, r3, #1
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d017      	beq.n	8003030 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d123      	bne.n	8003084 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	08da      	lsrs	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3208      	adds	r2, #8
 8003044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	08da      	lsrs	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3208      	adds	r2, #8
 800307e:	6939      	ldr	r1, [r7, #16]
 8003080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0203 	and.w	r2, r3, #3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80ac 	beq.w	800321e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c6:	4b5f      	ldr	r3, [pc, #380]	; (8003244 <HAL_GPIO_Init+0x330>)
 80030c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ca:	4a5e      	ldr	r2, [pc, #376]	; (8003244 <HAL_GPIO_Init+0x330>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6613      	str	r3, [r2, #96]	; 0x60
 80030d2:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <HAL_GPIO_Init+0x330>)
 80030d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030de:	4a5a      	ldr	r2, [pc, #360]	; (8003248 <HAL_GPIO_Init+0x334>)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	3302      	adds	r3, #2
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	220f      	movs	r2, #15
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003108:	d025      	beq.n	8003156 <HAL_GPIO_Init+0x242>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4f      	ldr	r2, [pc, #316]	; (800324c <HAL_GPIO_Init+0x338>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <HAL_GPIO_Init+0x23e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4e      	ldr	r2, [pc, #312]	; (8003250 <HAL_GPIO_Init+0x33c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_GPIO_Init+0x23a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4d      	ldr	r2, [pc, #308]	; (8003254 <HAL_GPIO_Init+0x340>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_Init+0x236>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4c      	ldr	r2, [pc, #304]	; (8003258 <HAL_GPIO_Init+0x344>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00d      	beq.n	8003146 <HAL_GPIO_Init+0x232>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4b      	ldr	r2, [pc, #300]	; (800325c <HAL_GPIO_Init+0x348>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_Init+0x22e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4a      	ldr	r2, [pc, #296]	; (8003260 <HAL_GPIO_Init+0x34c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_GPIO_Init+0x22a>
 800313a:	2306      	movs	r3, #6
 800313c:	e00c      	b.n	8003158 <HAL_GPIO_Init+0x244>
 800313e:	2307      	movs	r3, #7
 8003140:	e00a      	b.n	8003158 <HAL_GPIO_Init+0x244>
 8003142:	2305      	movs	r3, #5
 8003144:	e008      	b.n	8003158 <HAL_GPIO_Init+0x244>
 8003146:	2304      	movs	r3, #4
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x244>
 800314a:	2303      	movs	r3, #3
 800314c:	e004      	b.n	8003158 <HAL_GPIO_Init+0x244>
 800314e:	2302      	movs	r3, #2
 8003150:	e002      	b.n	8003158 <HAL_GPIO_Init+0x244>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_GPIO_Init+0x244>
 8003156:	2300      	movs	r3, #0
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	f002 0203 	and.w	r2, r2, #3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4093      	lsls	r3, r2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003168:	4937      	ldr	r1, [pc, #220]	; (8003248 <HAL_GPIO_Init+0x334>)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003176:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_GPIO_Init+0x350>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800319a:	4a32      	ldr	r2, [pc, #200]	; (8003264 <HAL_GPIO_Init+0x350>)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031a0:	4b30      	ldr	r3, [pc, #192]	; (8003264 <HAL_GPIO_Init+0x350>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <HAL_GPIO_Init+0x350>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <HAL_GPIO_Init+0x350>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031ee:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <HAL_GPIO_Init+0x350>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <HAL_GPIO_Init+0x350>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003218:	4a12      	ldr	r2, [pc, #72]	; (8003264 <HAL_GPIO_Init+0x350>)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3301      	adds	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	f47f ae78 	bne.w	8002f24 <HAL_GPIO_Init+0x10>
  }
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	40010000 	.word	0x40010000
 800324c:	48000400 	.word	0x48000400
 8003250:	48000800 	.word	0x48000800
 8003254:	48000c00 	.word	0x48000c00
 8003258:	48001000 	.word	0x48001000
 800325c:	48001400 	.word	0x48001400
 8003260:	48001800 	.word	0x48001800
 8003264:	40010400 	.word	0x40010400

08003268 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <HAL_PWREx_GetVoltageRange+0x18>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40007000 	.word	0x40007000

08003284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003292:	d130      	bne.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800329c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a0:	d038      	beq.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032aa:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2232      	movs	r2, #50	; 0x32
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	0c9b      	lsrs	r3, r3, #18
 80032c4:	3301      	adds	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c8:	e002      	b.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	d102      	bne.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f2      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f0:	d110      	bne.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e00f      	b.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d007      	beq.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800330c:	4a05      	ldr	r2, [pc, #20]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003312:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40007000 	.word	0x40007000
 8003328:	20000024 	.word	0x20000024
 800332c:	431bde83 	.word	0x431bde83

08003330 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e3ca      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003342:	4b97      	ldr	r3, [pc, #604]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334c:	4b94      	ldr	r3, [pc, #592]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80e4 	beq.w	800352c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_RCC_OscConfig+0x4a>
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b0c      	cmp	r3, #12
 800336e:	f040 808b 	bne.w	8003488 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b01      	cmp	r3, #1
 8003376:	f040 8087 	bne.w	8003488 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800337a:	4b89      	ldr	r3, [pc, #548]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_RCC_OscConfig+0x62>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e3a2      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	4b82      	ldr	r3, [pc, #520]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <HAL_RCC_OscConfig+0x7c>
 80033a2:	4b7f      	ldr	r3, [pc, #508]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033aa:	e005      	b.n	80033b8 <HAL_RCC_OscConfig+0x88>
 80033ac:	4b7c      	ldr	r3, [pc, #496]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d223      	bcs.n	8003404 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fd55 	bl	8003e70 <RCC_SetFlashLatencyFromMSIRange>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e383      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d0:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a72      	ldr	r2, [pc, #456]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80033d6:	f043 0308 	orr.w	r3, r3, #8
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b70      	ldr	r3, [pc, #448]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	496d      	ldr	r1, [pc, #436]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ee:	4b6c      	ldr	r3, [pc, #432]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	4968      	ldr	r1, [pc, #416]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
 8003402:	e025      	b.n	8003450 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003404:	4b66      	ldr	r3, [pc, #408]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a65      	ldr	r2, [pc, #404]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 800340a:	f043 0308 	orr.w	r3, r3, #8
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	4b63      	ldr	r3, [pc, #396]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4960      	ldr	r1, [pc, #384]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003422:	4b5f      	ldr	r3, [pc, #380]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	495b      	ldr	r1, [pc, #364]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fd15 	bl	8003e70 <RCC_SetFlashLatencyFromMSIRange>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e343      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003450:	f000 fc4a 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b52      	ldr	r3, [pc, #328]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	4950      	ldr	r1, [pc, #320]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
 800346c:	4a4e      	ldr	r2, [pc, #312]	; (80035a8 <HAL_RCC_OscConfig+0x278>)
 800346e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003470:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <HAL_RCC_OscConfig+0x27c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f945 	bl	8002704 <HAL_InitTick>
 800347a:	4603      	mov	r3, r0
 800347c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d052      	beq.n	800352a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	e327      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d032      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003490:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a42      	ldr	r2, [pc, #264]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800349c:	f7ff f982 	bl	80027a4 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a4:	f7ff f97e 	bl	80027a4 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e310      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034b6:	4b3a      	ldr	r3, [pc, #232]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c2:	4b37      	ldr	r3, [pc, #220]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a36      	ldr	r2, [pc, #216]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034c8:	f043 0308 	orr.w	r3, r3, #8
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4931      	ldr	r1, [pc, #196]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034e0:	4b2f      	ldr	r3, [pc, #188]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	492c      	ldr	r1, [pc, #176]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
 80034f4:	e01a      	b.n	800352c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034f6:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a29      	ldr	r2, [pc, #164]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003502:	f7ff f94f 	bl	80027a4 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800350a:	f7ff f94b 	bl	80027a4 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e2dd      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800351c:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f0      	bne.n	800350a <HAL_RCC_OscConfig+0x1da>
 8003528:	e000      	b.n	800352c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800352a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d074      	beq.n	8003622 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d005      	beq.n	800354a <HAL_RCC_OscConfig+0x21a>
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b0c      	cmp	r3, #12
 8003542:	d10e      	bne.n	8003562 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d10b      	bne.n	8003562 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d064      	beq.n	8003620 <HAL_RCC_OscConfig+0x2f0>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d160      	bne.n	8003620 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e2ba      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x24a>
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	e026      	b.n	80035c8 <HAL_RCC_OscConfig+0x298>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003582:	d115      	bne.n	80035b0 <HAL_RCC_OscConfig+0x280>
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 800358a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a02      	ldr	r2, [pc, #8]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e014      	b.n	80035c8 <HAL_RCC_OscConfig+0x298>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	080064a4 	.word	0x080064a4
 80035a8:	20000024 	.word	0x20000024
 80035ac:	20000028 	.word	0x20000028
 80035b0:	4ba0      	ldr	r3, [pc, #640]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a9f      	ldr	r2, [pc, #636]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b9d      	ldr	r3, [pc, #628]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a9c      	ldr	r2, [pc, #624]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80035c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7ff f8e8 	bl	80027a4 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d8:	f7ff f8e4 	bl	80027a4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e276      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ea:	4b92      	ldr	r3, [pc, #584]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2a8>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7ff f8d4 	bl	80027a4 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003600:	f7ff f8d0 	bl	80027a4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e262      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003612:	4b88      	ldr	r3, [pc, #544]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x2d0>
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d060      	beq.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d005      	beq.n	8003640 <HAL_RCC_OscConfig+0x310>
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d119      	bne.n	800366e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d116      	bne.n	800366e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003640:	4b7c      	ldr	r3, [pc, #496]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_OscConfig+0x328>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e23f      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003658:	4b76      	ldr	r3, [pc, #472]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	061b      	lsls	r3, r3, #24
 8003666:	4973      	ldr	r1, [pc, #460]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800366c:	e040      	b.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d023      	beq.n	80036be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003676:	4b6f      	ldr	r3, [pc, #444]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6e      	ldr	r2, [pc, #440]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7ff f88f 	bl	80027a4 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368a:	f7ff f88b 	bl	80027a4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e21d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800369c:	4b65      	ldr	r3, [pc, #404]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b62      	ldr	r3, [pc, #392]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	495f      	ldr	r1, [pc, #380]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
 80036bc:	e018      	b.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036be:	4b5d      	ldr	r3, [pc, #372]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a5c      	ldr	r2, [pc, #368]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80036c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7ff f86b 	bl	80027a4 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d2:	f7ff f867 	bl	80027a4 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e1f9      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e4:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d03c      	beq.n	8003776 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01c      	beq.n	800373e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003704:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370a:	4a4a      	ldr	r2, [pc, #296]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7ff f846 	bl	80027a4 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371c:	f7ff f842 	bl	80027a4 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e1d4      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800372e:	4b41      	ldr	r3, [pc, #260]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ef      	beq.n	800371c <HAL_RCC_OscConfig+0x3ec>
 800373c:	e01b      	b.n	8003776 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373e:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003744:	4a3b      	ldr	r2, [pc, #236]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374e:	f7ff f829 	bl	80027a4 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003756:	f7ff f825 	bl	80027a4 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e1b7      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003768:	4b32      	ldr	r3, [pc, #200]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 800376a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ef      	bne.n	8003756 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80a6 	beq.w	80038d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003784:	2300      	movs	r3, #0
 8003786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003788:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10d      	bne.n	80037b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	4a26      	ldr	r2, [pc, #152]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 800379a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379e:	6593      	str	r3, [r2, #88]	; 0x58
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ac:	2301      	movs	r3, #1
 80037ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <HAL_RCC_OscConfig+0x508>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d118      	bne.n	80037ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037bc:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_RCC_OscConfig+0x508>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_RCC_OscConfig+0x508>)
 80037c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c8:	f7fe ffec 	bl	80027a4 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d0:	f7fe ffe8 	bl	80027a4 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e17a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e2:	4b15      	ldr	r3, [pc, #84]	; (8003838 <HAL_RCC_OscConfig+0x508>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d108      	bne.n	8003808 <HAL_RCC_OscConfig+0x4d8>
 80037f6:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003806:	e029      	b.n	800385c <HAL_RCC_OscConfig+0x52c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b05      	cmp	r3, #5
 800380e:	d115      	bne.n	800383c <HAL_RCC_OscConfig+0x50c>
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	4a07      	ldr	r2, [pc, #28]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003818:	f043 0304 	orr.w	r3, r3, #4
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	4a03      	ldr	r2, [pc, #12]	; (8003834 <HAL_RCC_OscConfig+0x504>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003830:	e014      	b.n	800385c <HAL_RCC_OscConfig+0x52c>
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000
 8003838:	40007000 	.word	0x40007000
 800383c:	4b9c      	ldr	r3, [pc, #624]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a9b      	ldr	r2, [pc, #620]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800384c:	4b98      	ldr	r3, [pc, #608]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	4a97      	ldr	r2, [pc, #604]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d016      	beq.n	8003892 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fe ff9e 	bl	80027a4 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fe ff9a 	bl	80027a4 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e12a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003882:	4b8b      	ldr	r3, [pc, #556]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ed      	beq.n	800386c <HAL_RCC_OscConfig+0x53c>
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fe ff87 	bl	80027a4 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fe ff83 	bl	80027a4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e113      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b0:	4b7f      	ldr	r3, [pc, #508]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ed      	bne.n	800389a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c4:	4b7a      	ldr	r3, [pc, #488]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	4a79      	ldr	r2, [pc, #484]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 80038ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80fe 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	2b02      	cmp	r3, #2
 80038e0:	f040 80d0 	bne.w	8003a84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038e4:	4b72      	ldr	r3, [pc, #456]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f003 0203 	and.w	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d130      	bne.n	800395a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	3b01      	subs	r3, #1
 8003904:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d127      	bne.n	800395a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003914:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d11f      	bne.n	800395a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003924:	2a07      	cmp	r2, #7
 8003926:	bf14      	ite	ne
 8003928:	2201      	movne	r2, #1
 800392a:	2200      	moveq	r2, #0
 800392c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800392e:	4293      	cmp	r3, r2
 8003930:	d113      	bne.n	800395a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	3b01      	subs	r3, #1
 8003940:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d109      	bne.n	800395a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d06e      	beq.n	8003a38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b0c      	cmp	r3, #12
 800395e:	d069      	beq.n	8003a34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800396c:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0ad      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800397c:	4b4c      	ldr	r3, [pc, #304]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a4b      	ldr	r2, [pc, #300]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003986:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003988:	f7fe ff0c 	bl	80027a4 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003990:	f7fe ff08 	bl	80027a4 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e09a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a2:	4b43      	ldr	r3, [pc, #268]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ae:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <HAL_RCC_OscConfig+0x784>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039be:	3a01      	subs	r2, #1
 80039c0:	0112      	lsls	r2, r2, #4
 80039c2:	4311      	orrs	r1, r2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039c8:	0212      	lsls	r2, r2, #8
 80039ca:	4311      	orrs	r1, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039d0:	0852      	lsrs	r2, r2, #1
 80039d2:	3a01      	subs	r2, #1
 80039d4:	0552      	lsls	r2, r2, #21
 80039d6:	4311      	orrs	r1, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039dc:	0852      	lsrs	r2, r2, #1
 80039de:	3a01      	subs	r2, #1
 80039e0:	0652      	lsls	r2, r2, #25
 80039e2:	4311      	orrs	r1, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039e8:	0912      	lsrs	r2, r2, #4
 80039ea:	0452      	lsls	r2, r2, #17
 80039ec:	430a      	orrs	r2, r1
 80039ee:	4930      	ldr	r1, [pc, #192]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039f4:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a2d      	ldr	r2, [pc, #180]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 80039fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a00:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a0c:	f7fe feca 	bl	80027a4 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fe fec6 	bl	80027a4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e058      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a32:	e050      	b.n	8003ad6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e04f      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a38:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d148      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a50:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a5c:	f7fe fea2 	bl	80027a4 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fe fe9e 	bl	80027a4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e030      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x734>
 8003a82:	e028      	b.n	8003ad6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b0c      	cmp	r3, #12
 8003a88:	d023      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <HAL_RCC_OscConfig+0x780>)
 8003a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7fe fe85 	bl	80027a4 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a9c:	e00c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9e:	f7fe fe81 	bl	80027a4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d905      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e013      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_OscConfig+0x7b0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ec      	bne.n	8003a9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_RCC_OscConfig+0x7b0>)
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	4905      	ldr	r1, [pc, #20]	; (8003ae0 <HAL_RCC_OscConfig+0x7b0>)
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_RCC_OscConfig+0x7b4>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	60cb      	str	r3, [r1, #12]
 8003ad0:	e001      	b.n	8003ad6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	feeefffc 	.word	0xfeeefffc

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0e7      	b.n	8003ccc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003afc:	4b75      	ldr	r3, [pc, #468]	; (8003cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d910      	bls.n	8003b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b72      	ldr	r3, [pc, #456]	; (8003cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 0207 	bic.w	r2, r3, #7
 8003b12:	4970      	ldr	r1, [pc, #448]	; (8003cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b6e      	ldr	r3, [pc, #440]	; (8003cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0cf      	b.n	8003ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d010      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	4b66      	ldr	r3, [pc, #408]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d908      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b48:	4b63      	ldr	r3, [pc, #396]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4960      	ldr	r1, [pc, #384]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d04c      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6e:	4b5a      	ldr	r3, [pc, #360]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d121      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0a6      	b.n	8003ccc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b86:	4b54      	ldr	r3, [pc, #336]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d115      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e09a      	b.n	8003ccc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b9e:	4b4e      	ldr	r3, [pc, #312]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e08e      	b.n	8003ccc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bae:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e086      	b.n	8003ccc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bbe:	4b46      	ldr	r3, [pc, #280]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4943      	ldr	r1, [pc, #268]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd0:	f7fe fde8 	bl	80027a4 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd8:	f7fe fde4 	bl	80027a4 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e06e      	b.n	8003ccc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 020c 	and.w	r2, r3, #12
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d1eb      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d010      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d208      	bcs.n	8003c2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c1c:	4b2e      	ldr	r3, [pc, #184]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	492b      	ldr	r1, [pc, #172]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2e:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d210      	bcs.n	8003c5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 0207 	bic.w	r2, r3, #7
 8003c44:	4923      	ldr	r1, [pc, #140]	; (8003cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4c:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e036      	b.n	8003ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4918      	ldr	r1, [pc, #96]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4910      	ldr	r1, [pc, #64]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c9c:	f000 f824 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	490b      	ldr	r1, [pc, #44]	; (8003cdc <HAL_RCC_ClockConfig+0x1f4>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb8:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <HAL_RCC_ClockConfig+0x1f8>)
 8003cba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1fc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe fd1f 	bl	8002704 <HAL_InitTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cca:	7afb      	ldrb	r3, [r7, #11]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40022000 	.word	0x40022000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	080064a4 	.word	0x080064a4
 8003ce0:	20000024 	.word	0x20000024
 8003ce4:	20000028 	.word	0x20000028

08003ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf6:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d00:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x34>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d121      	bne.n	8003d5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d11e      	bne.n	8003d5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d1c:	4b34      	ldr	r3, [pc, #208]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d28:	4b31      	ldr	r3, [pc, #196]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e005      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d38:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d44:	4a2b      	ldr	r2, [pc, #172]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d102      	bne.n	8003d66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d60:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	e004      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d6c:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8003d6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d134      	bne.n	8003de0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d76:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d003      	beq.n	8003d8e <HAL_RCC_GetSysClockFreq+0xa6>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d003      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0xac>
 8003d8c:	e005      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d8e:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d90:	617b      	str	r3, [r7, #20]
      break;
 8003d92:	e005      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8003d96:	617b      	str	r3, [r7, #20]
      break;
 8003d98:	e002      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	617b      	str	r3, [r7, #20]
      break;
 8003d9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003da0:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	3301      	adds	r3, #1
 8003dac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	fb03 f202 	mul.w	r2, r3, r2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	0e5b      	lsrs	r3, r3, #25
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003de0:	69bb      	ldr	r3, [r7, #24]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	; 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	080064bc 	.word	0x080064bc
 8003df8:	00f42400 	.word	0x00f42400
 8003dfc:	007a1200 	.word	0x007a1200

08003e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000024 	.word	0x20000024

08003e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e1c:	f7ff fff0 	bl	8003e00 <HAL_RCC_GetHCLKFreq>
 8003e20:	4602      	mov	r2, r0
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	4904      	ldr	r1, [pc, #16]	; (8003e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e2e:	5ccb      	ldrb	r3, [r1, r3]
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	080064b4 	.word	0x080064b4

08003e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e48:	f7ff ffda 	bl	8003e00 <HAL_RCC_GetHCLKFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	0adb      	lsrs	r3, r3, #11
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	4904      	ldr	r1, [pc, #16]	; (8003e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	080064b4 	.word	0x080064b4

08003e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e78:	2300      	movs	r3, #0
 8003e7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e7c:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e88:	f7ff f9ee 	bl	8003268 <HAL_PWREx_GetVoltageRange>
 8003e8c:	6178      	str	r0, [r7, #20]
 8003e8e:	e014      	b.n	8003eba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	4a24      	ldr	r2, [pc, #144]	; (8003f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e9c:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ea8:	f7ff f9de 	bl	8003268 <HAL_PWREx_GetVoltageRange>
 8003eac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003eae:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec0:	d10b      	bne.n	8003eda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d919      	bls.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2ba0      	cmp	r3, #160	; 0xa0
 8003ecc:	d902      	bls.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ece:	2302      	movs	r3, #2
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	e013      	b.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	e010      	b.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b80      	cmp	r3, #128	; 0x80
 8003ede:	d902      	bls.n	8003ee6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	e00a      	b.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d102      	bne.n	8003ef2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eec:	2302      	movs	r3, #2
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	e004      	b.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b70      	cmp	r3, #112	; 0x70
 8003ef6:	d101      	bne.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ef8:	2301      	movs	r3, #1
 8003efa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f023 0207 	bic.w	r2, r3, #7
 8003f04:	4909      	ldr	r1, [pc, #36]	; (8003f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f0c:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d001      	beq.n	8003f1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40022000 	.word	0x40022000

08003f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f38:	2300      	movs	r3, #0
 8003f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d041      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f54:	d02a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f5a:	d824      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f60:	d008      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f66:	d81e      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f70:	d010      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f72:	e018      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f74:	4b86      	ldr	r3, [pc, #536]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a85      	ldr	r2, [pc, #532]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f80:	e015      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3304      	adds	r3, #4
 8003f86:	2100      	movs	r1, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fabb 	bl	8004504 <RCCEx_PLLSAI1_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f92:	e00c      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3320      	adds	r3, #32
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fba6 	bl	80046ec <RCCEx_PLLSAI2_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fa4:	e003      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	74fb      	strb	r3, [r7, #19]
      break;
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10b      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fb4:	4b76      	ldr	r3, [pc, #472]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc2:	4973      	ldr	r1, [pc, #460]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fca:	e001      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d041      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fe4:	d02a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fe6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fea:	d824      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ff0:	d008      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ff6:	d81e      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004000:	d010      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004002:	e018      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004004:	4b62      	ldr	r3, [pc, #392]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a61      	ldr	r2, [pc, #388]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004010:	e015      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fa73 	bl	8004504 <RCCEx_PLLSAI1_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004022:	e00c      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3320      	adds	r3, #32
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fb5e 	bl	80046ec <RCCEx_PLLSAI2_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004034:	e003      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	74fb      	strb	r3, [r7, #19]
      break;
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800403c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004044:	4b52      	ldr	r3, [pc, #328]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004052:	494f      	ldr	r1, [pc, #316]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800405a:	e001      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80a0 	beq.w	80041ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406e:	2300      	movs	r3, #0
 8004070:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004082:	2300      	movs	r3, #0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00d      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004088:	4b41      	ldr	r3, [pc, #260]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	4a40      	ldr	r2, [pc, #256]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004092:	6593      	str	r3, [r2, #88]	; 0x58
 8004094:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a0:	2301      	movs	r3, #1
 80040a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040a4:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a3a      	ldr	r2, [pc, #232]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040b0:	f7fe fb78 	bl	80027a4 <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040b6:	e009      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b8:	f7fe fb74 	bl	80027a4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d902      	bls.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	74fb      	strb	r3, [r7, #19]
        break;
 80040ca:	e005      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040cc:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0ef      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d15c      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040de:	4b2c      	ldr	r3, [pc, #176]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01f      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d019      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040fc:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004108:	4b21      	ldr	r3, [pc, #132]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	4a20      	ldr	r2, [pc, #128]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004118:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004128:	4a19      	ldr	r2, [pc, #100]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fe fb33 	bl	80027a4 <HAL_GetTick>
 800413e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004140:	e00b      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004142:	f7fe fb2f 	bl	80027a4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004150:	4293      	cmp	r3, r2
 8004152:	d902      	bls.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	74fb      	strb	r3, [r7, #19]
            break;
 8004158:	e006      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ec      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004168:	7cfb      	ldrb	r3, [r7, #19]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10c      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800417e:	4904      	ldr	r1, [pc, #16]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004186:	e009      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004188:	7cfb      	ldrb	r3, [r7, #19]
 800418a:	74bb      	strb	r3, [r7, #18]
 800418c:	e006      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
 8004194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800419c:	7c7b      	ldrb	r3, [r7, #17]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d105      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a2:	4b9e      	ldr	r3, [pc, #632]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	4a9d      	ldr	r2, [pc, #628]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ba:	4b98      	ldr	r3, [pc, #608]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	f023 0203 	bic.w	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	4994      	ldr	r1, [pc, #592]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041dc:	4b8f      	ldr	r3, [pc, #572]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e2:	f023 020c 	bic.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	498c      	ldr	r1, [pc, #560]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041fe:	4b87      	ldr	r3, [pc, #540]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004204:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	4983      	ldr	r1, [pc, #524]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004220:	4b7e      	ldr	r3, [pc, #504]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	497b      	ldr	r1, [pc, #492]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004242:	4b76      	ldr	r3, [pc, #472]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	4972      	ldr	r1, [pc, #456]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004264:	4b6d      	ldr	r3, [pc, #436]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	496a      	ldr	r1, [pc, #424]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004286:	4b65      	ldr	r3, [pc, #404]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	4961      	ldr	r1, [pc, #388]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a8:	4b5c      	ldr	r3, [pc, #368]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b6:	4959      	ldr	r1, [pc, #356]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ca:	4b54      	ldr	r3, [pc, #336]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d8:	4950      	ldr	r1, [pc, #320]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042ec:	4b4b      	ldr	r3, [pc, #300]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	4948      	ldr	r1, [pc, #288]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800430e:	4b43      	ldr	r3, [pc, #268]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	493f      	ldr	r1, [pc, #252]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d028      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004330:	4b3a      	ldr	r3, [pc, #232]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433e:	4937      	ldr	r1, [pc, #220]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800434e:	d106      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004350:	4b32      	ldr	r3, [pc, #200]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a31      	ldr	r2, [pc, #196]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800435a:	60d3      	str	r3, [r2, #12]
 800435c:	e011      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004366:	d10c      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	2101      	movs	r1, #1
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f8c8 	bl	8004504 <RCCEx_PLLSAI1_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d028      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	491f      	ldr	r1, [pc, #124]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ac:	d106      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	4a1a      	ldr	r2, [pc, #104]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043b8:	60d3      	str	r3, [r2, #12]
 80043ba:	e011      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3304      	adds	r3, #4
 80043ca:	2101      	movs	r1, #1
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 f899 	bl	8004504 <RCCEx_PLLSAI1_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043d6:	7cfb      	ldrb	r3, [r7, #19]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02b      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fa:	4908      	ldr	r1, [pc, #32]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800440a:	d109      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4a02      	ldr	r2, [pc, #8]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004416:	60d3      	str	r3, [r2, #12]
 8004418:	e014      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004428:	d10c      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3304      	adds	r3, #4
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f867 	bl	8004504 <RCCEx_PLLSAI1_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02f      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800445e:	4928      	ldr	r1, [pc, #160]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800446a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800446e:	d10d      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	2102      	movs	r1, #2
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f844 	bl	8004504 <RCCEx_PLLSAI1_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d014      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	74bb      	strb	r3, [r7, #18]
 800448a:	e011      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004494:	d10c      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3320      	adds	r3, #32
 800449a:	2102      	movs	r1, #2
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f925 	bl	80046ec <RCCEx_PLLSAI2_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044a6:	7cfb      	ldrb	r3, [r7, #19]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044bc:	4b10      	ldr	r3, [pc, #64]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ca:	490d      	ldr	r1, [pc, #52]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ee:	4904      	ldr	r1, [pc, #16]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40021000 	.word	0x40021000

08004504 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004512:	4b75      	ldr	r3, [pc, #468]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d018      	beq.n	8004550 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800451e:	4b72      	ldr	r3, [pc, #456]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0203 	and.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d10d      	bne.n	800454a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
       ||
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004536:	4b6c      	ldr	r3, [pc, #432]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
       ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d047      	beq.n	80045da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
 800454e:	e044      	b.n	80045da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d018      	beq.n	800458a <RCCEx_PLLSAI1_Config+0x86>
 8004558:	2b03      	cmp	r3, #3
 800455a:	d825      	bhi.n	80045a8 <RCCEx_PLLSAI1_Config+0xa4>
 800455c:	2b01      	cmp	r3, #1
 800455e:	d002      	beq.n	8004566 <RCCEx_PLLSAI1_Config+0x62>
 8004560:	2b02      	cmp	r3, #2
 8004562:	d009      	beq.n	8004578 <RCCEx_PLLSAI1_Config+0x74>
 8004564:	e020      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004566:	4b60      	ldr	r3, [pc, #384]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d11d      	bne.n	80045ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004576:	e01a      	b.n	80045ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004578:	4b5b      	ldr	r3, [pc, #364]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d116      	bne.n	80045b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004588:	e013      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800458a:	4b57      	ldr	r3, [pc, #348]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004596:	4b54      	ldr	r3, [pc, #336]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045a6:	e006      	b.n	80045b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      break;
 80045ac:	e004      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ae:	bf00      	nop
 80045b0:	e002      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045b2:	bf00      	nop
 80045b4:	e000      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045be:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	430b      	orrs	r3, r1
 80045d4:	4944      	ldr	r1, [pc, #272]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d17d      	bne.n	80046dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045e0:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ec:	f7fe f8da 	bl	80027a4 <HAL_GetTick>
 80045f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045f2:	e009      	b.n	8004608 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f4:	f7fe f8d6 	bl	80027a4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d902      	bls.n	8004608 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	73fb      	strb	r3, [r7, #15]
        break;
 8004606:	e005      	b.n	8004614 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004608:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ef      	bne.n	80045f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d160      	bne.n	80046dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d111      	bne.n	8004644 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004620:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	0211      	lsls	r1, r2, #8
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68d2      	ldr	r2, [r2, #12]
 8004636:	0912      	lsrs	r2, r2, #4
 8004638:	0452      	lsls	r2, r2, #17
 800463a:	430a      	orrs	r2, r1
 800463c:	492a      	ldr	r1, [pc, #168]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463e:	4313      	orrs	r3, r2
 8004640:	610b      	str	r3, [r1, #16]
 8004642:	e027      	b.n	8004694 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d112      	bne.n	8004670 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800464a:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004652:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6892      	ldr	r2, [r2, #8]
 800465a:	0211      	lsls	r1, r2, #8
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6912      	ldr	r2, [r2, #16]
 8004660:	0852      	lsrs	r2, r2, #1
 8004662:	3a01      	subs	r2, #1
 8004664:	0552      	lsls	r2, r2, #21
 8004666:	430a      	orrs	r2, r1
 8004668:	491f      	ldr	r1, [pc, #124]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	610b      	str	r3, [r1, #16]
 800466e:	e011      	b.n	8004694 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004670:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004678:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6892      	ldr	r2, [r2, #8]
 8004680:	0211      	lsls	r1, r2, #8
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6952      	ldr	r2, [r2, #20]
 8004686:	0852      	lsrs	r2, r2, #1
 8004688:	3a01      	subs	r2, #1
 800468a:	0652      	lsls	r2, r2, #25
 800468c:	430a      	orrs	r2, r1
 800468e:	4916      	ldr	r1, [pc, #88]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004694:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a13      	ldr	r2, [pc, #76]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800469e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fe f880 	bl	80027a4 <HAL_GetTick>
 80046a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046a6:	e009      	b.n	80046bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046a8:	f7fe f87c 	bl	80027a4 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d902      	bls.n	80046bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	73fb      	strb	r3, [r7, #15]
          break;
 80046ba:	e005      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0ef      	beq.n	80046a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	4904      	ldr	r1, [pc, #16]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000

080046ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046fa:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d018      	beq.n	8004738 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004706:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0203 	and.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d10d      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
       ||
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800471e:	4b61      	ldr	r3, [pc, #388]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
       ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d047      	beq.n	80047c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e044      	b.n	80047c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b03      	cmp	r3, #3
 800473e:	d018      	beq.n	8004772 <RCCEx_PLLSAI2_Config+0x86>
 8004740:	2b03      	cmp	r3, #3
 8004742:	d825      	bhi.n	8004790 <RCCEx_PLLSAI2_Config+0xa4>
 8004744:	2b01      	cmp	r3, #1
 8004746:	d002      	beq.n	800474e <RCCEx_PLLSAI2_Config+0x62>
 8004748:	2b02      	cmp	r3, #2
 800474a:	d009      	beq.n	8004760 <RCCEx_PLLSAI2_Config+0x74>
 800474c:	e020      	b.n	8004790 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800474e:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11d      	bne.n	8004796 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475e:	e01a      	b.n	8004796 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004760:	4b50      	ldr	r3, [pc, #320]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d116      	bne.n	800479a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004770:	e013      	b.n	800479a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004772:	4b4c      	ldr	r3, [pc, #304]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10f      	bne.n	800479e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800477e:	4b49      	ldr	r3, [pc, #292]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800478e:	e006      	b.n	800479e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e004      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800479e:	bf00      	nop
    }

    if(status == HAL_OK)
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10d      	bne.n	80047c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047a6:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	430b      	orrs	r3, r1
 80047bc:	4939      	ldr	r1, [pc, #228]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d167      	bne.n	8004898 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a35      	ldr	r2, [pc, #212]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fd ffe6 	bl	80027a4 <HAL_GetTick>
 80047d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047da:	e009      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047dc:	f7fd ffe2 	bl	80027a4 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d902      	bls.n	80047f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	73fb      	strb	r3, [r7, #15]
        break;
 80047ee:	e005      	b.n	80047fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ef      	bne.n	80047dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d14a      	bne.n	8004898 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d111      	bne.n	800482c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004808:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	0211      	lsls	r1, r2, #8
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68d2      	ldr	r2, [r2, #12]
 800481e:	0912      	lsrs	r2, r2, #4
 8004820:	0452      	lsls	r2, r2, #17
 8004822:	430a      	orrs	r2, r1
 8004824:	491f      	ldr	r1, [pc, #124]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	614b      	str	r3, [r1, #20]
 800482a:	e011      	b.n	8004850 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800482c:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004834:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6892      	ldr	r2, [r2, #8]
 800483c:	0211      	lsls	r1, r2, #8
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6912      	ldr	r2, [r2, #16]
 8004842:	0852      	lsrs	r2, r2, #1
 8004844:	3a01      	subs	r2, #1
 8004846:	0652      	lsls	r2, r2, #25
 8004848:	430a      	orrs	r2, r1
 800484a:	4916      	ldr	r1, [pc, #88]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800484c:	4313      	orrs	r3, r2
 800484e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004850:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fd ffa2 	bl	80027a4 <HAL_GetTick>
 8004860:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004862:	e009      	b.n	8004878 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004864:	f7fd ff9e 	bl	80027a4 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d902      	bls.n	8004878 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	73fb      	strb	r3, [r7, #15]
          break;
 8004876:	e005      	b.n	8004884 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0ef      	beq.n	8004864 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4904      	ldr	r1, [pc, #16]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004894:	4313      	orrs	r3, r2
 8004896:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000

080048a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e040      	b.n	800493c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fd fe10 	bl	80024f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2224      	movs	r2, #36	; 0x24
 80048d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 febc 	bl	800566c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fc01 	bl	80050fc <UART_SetConfig>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e01b      	b.n	800493c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 ff3b 	bl	80057b0 <UART_CheckIdleState>
 800493a:	4603      	mov	r3, r0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004956:	2b20      	cmp	r3, #32
 8004958:	d165      	bne.n	8004a26 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_UART_Transmit_DMA+0x22>
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e05e      	b.n	8004a28 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	88fa      	ldrh	r2, [r7, #6]
 8004974:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2221      	movs	r2, #33	; 0x21
 800498c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	2b00      	cmp	r3, #0
 8004994:	d027      	beq.n	80049e6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <HAL_UART_Transmit_DMA+0xec>)
 800499c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <HAL_UART_Transmit_DMA+0xf0>)
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	4a23      	ldr	r2, [pc, #140]	; (8004a38 <HAL_UART_Transmit_DMA+0xf4>)
 80049ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	2200      	movs	r2, #0
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	4619      	mov	r1, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3328      	adds	r3, #40	; 0x28
 80049c6:	461a      	mov	r2, r3
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	f7fe f8e5 	bl	8002b98 <HAL_DMA_Start_IT>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2210      	movs	r2, #16
 80049d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e020      	b.n	8004a28 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2240      	movs	r2, #64	; 0x40
 80049ec:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	613b      	str	r3, [r7, #16]
   return(result);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	623a      	str	r2, [r7, #32]
 8004a10:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	69f9      	ldr	r1, [r7, #28]
 8004a14:	6a3a      	ldr	r2, [r7, #32]
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e5      	bne.n	80049ee <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e000      	b.n	8004a28 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004a26:	2302      	movs	r3, #2
  }
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3728      	adds	r7, #40	; 0x28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	08005c25 	.word	0x08005c25
 8004a34:	08005cbf 	.word	0x08005cbf
 8004a38:	08005e45 	.word	0x08005e45

08004a3c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d137      	bne.n	8004ac4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_UART_Receive_DMA+0x24>
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e030      	b.n	8004ac6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_UART_Receive_DMA+0x94>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d01f      	beq.n	8004ab4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d018      	beq.n	8004ab4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	69f9      	ldr	r1, [r7, #28]
 8004aa6:	6a3a      	ldr	r2, [r7, #32]
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 ff88 	bl	80059d0 <UART_Start_Receive_DMA>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	e000      	b.n	8004ac6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
  }
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3728      	adds	r7, #40	; 0x28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40008000 	.word	0x40008000

08004ad4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b0ba      	sub	sp, #232	; 0xe8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004afa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004afe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b02:	4013      	ands	r3, r2
 8004b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d115      	bne.n	8004b3c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00f      	beq.n	8004b3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 82ae 	beq.w	800508e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
      }
      return;
 8004b3a:	e2a8      	b.n	800508e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8117 	beq.w	8004d74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b56:	4b85      	ldr	r3, [pc, #532]	; (8004d6c <HAL_UART_IRQHandler+0x298>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 810a 	beq.w	8004d74 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d011      	beq.n	8004b90 <HAL_UART_IRQHandler+0xbc>
 8004b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b86:	f043 0201 	orr.w	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d011      	beq.n	8004bc0 <HAL_UART_IRQHandler+0xec>
 8004b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2202      	movs	r2, #2
 8004bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb6:	f043 0204 	orr.w	r2, r3, #4
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d011      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x11c>
 8004bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2204      	movs	r2, #4
 8004bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be6:	f043 0202 	orr.w	r2, r3, #2
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d017      	beq.n	8004c2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d105      	bne.n	8004c14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00b      	beq.n	8004c2c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2208      	movs	r2, #8
 8004c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c22:	f043 0208 	orr.w	r2, r3, #8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d012      	beq.n	8004c5e <HAL_UART_IRQHandler+0x18a>
 8004c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00c      	beq.n	8004c5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8214 	beq.w	8005092 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d005      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d04f      	beq.n	8004d56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 ff50 	bl	8005b5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b40      	cmp	r3, #64	; 0x40
 8004cc8:	d141      	bne.n	8004d4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1d9      	bne.n	8004cca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d013      	beq.n	8004d46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d22:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <HAL_UART_IRQHandler+0x29c>)
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fd ffd2 	bl	8002cd4 <HAL_DMA_Abort_IT>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d017      	beq.n	8004d66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d40:	4610      	mov	r0, r2
 8004d42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	e00f      	b.n	8004d66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f9c2 	bl	80050d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	e00b      	b.n	8004d66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9be 	bl	80050d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	e007      	b.n	8004d66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f9ba 	bl	80050d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004d64:	e195      	b.n	8005092 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d66:	bf00      	nop
    return;
 8004d68:	e193      	b.n	8005092 <HAL_UART_IRQHandler+0x5be>
 8004d6a:	bf00      	nop
 8004d6c:	04000120 	.word	0x04000120
 8004d70:	08005ec3 	.word	0x08005ec3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	f040 814e 	bne.w	800501a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8147 	beq.w	800501a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8140 	beq.w	800501a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2210      	movs	r2, #16
 8004da0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	f040 80b8 	bne.w	8004f22 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 8167 	beq.w	8005096 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	f080 815f 	bcs.w	8005096 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f040 8086 	bne.w	8004f00 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1da      	bne.n	8004df4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3308      	adds	r3, #8
 8004e44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e50:	f023 0301 	bic.w	r3, r3, #1
 8004e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e1      	bne.n	8004e3e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ea0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e3      	bne.n	8004e7a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed0:	f023 0310 	bic.w	r3, r3, #16
 8004ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ee2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ee4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e4      	bne.n	8004ec0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fd feac 	bl	8002c58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f8e2 	bl	80050e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f20:	e0b9      	b.n	8005096 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 80ab 	beq.w	800509a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80a6 	beq.w	800509a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f70:	647b      	str	r3, [r7, #68]	; 0x44
 8004f72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e4      	bne.n	8004f4e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3308      	adds	r3, #8
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	623b      	str	r3, [r7, #32]
   return(result);
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fa8:	633a      	str	r2, [r7, #48]	; 0x30
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e3      	bne.n	8004f84 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f023 0310 	bic.w	r3, r3, #16
 8004fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	69b9      	ldr	r1, [r7, #24]
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e4      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800500c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f866 	bl	80050e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005018:	e03f      	b.n	800509a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00e      	beq.n	8005044 <HAL_UART_IRQHandler+0x570>
 8005026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800503a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 ff80 	bl	8005f42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005042:	e02d      	b.n	80050a0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00e      	beq.n	800506e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01c      	beq.n	800509e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
    }
    return;
 800506c:	e017      	b.n	800509e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800506e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d012      	beq.n	80050a0 <HAL_UART_IRQHandler+0x5cc>
 800507a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00c      	beq.n	80050a0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 ff31 	bl	8005eee <UART_EndTransmit_IT>
    return;
 800508c:	e008      	b.n	80050a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800508e:	bf00      	nop
 8005090:	e006      	b.n	80050a0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005092:	bf00      	nop
 8005094:	e004      	b.n	80050a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005096:	bf00      	nop
 8005098:	e002      	b.n	80050a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800509e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050a0:	37e8      	adds	r7, #232	; 0xe8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop

080050a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005100:	b08a      	sub	sp, #40	; 0x28
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	431a      	orrs	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	431a      	orrs	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	4313      	orrs	r3, r2
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4ba4      	ldr	r3, [pc, #656]	; (80053bc <UART_SetConfig+0x2c0>)
 800512c:	4013      	ands	r3, r2
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005134:	430b      	orrs	r3, r1
 8005136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a99      	ldr	r2, [pc, #612]	; (80053c0 <UART_SetConfig+0x2c4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005164:	4313      	orrs	r3, r2
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005178:	430a      	orrs	r2, r1
 800517a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a90      	ldr	r2, [pc, #576]	; (80053c4 <UART_SetConfig+0x2c8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d126      	bne.n	80051d4 <UART_SetConfig+0xd8>
 8005186:	4b90      	ldr	r3, [pc, #576]	; (80053c8 <UART_SetConfig+0x2cc>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	2b03      	cmp	r3, #3
 8005192:	d81b      	bhi.n	80051cc <UART_SetConfig+0xd0>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <UART_SetConfig+0xa0>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051ad 	.word	0x080051ad
 80051a0:	080051bd 	.word	0x080051bd
 80051a4:	080051b5 	.word	0x080051b5
 80051a8:	080051c5 	.word	0x080051c5
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b2:	e116      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80051b4:	2302      	movs	r3, #2
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ba:	e112      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80051bc:	2304      	movs	r3, #4
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e10e      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80051c4:	2308      	movs	r3, #8
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e10a      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80051cc:	2310      	movs	r3, #16
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d2:	e106      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a7c      	ldr	r2, [pc, #496]	; (80053cc <UART_SetConfig+0x2d0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d138      	bne.n	8005250 <UART_SetConfig+0x154>
 80051de:	4b7a      	ldr	r3, [pc, #488]	; (80053c8 <UART_SetConfig+0x2cc>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f003 030c 	and.w	r3, r3, #12
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	d82d      	bhi.n	8005248 <UART_SetConfig+0x14c>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <UART_SetConfig+0xf8>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005229 	.word	0x08005229
 80051f8:	08005249 	.word	0x08005249
 80051fc:	08005249 	.word	0x08005249
 8005200:	08005249 	.word	0x08005249
 8005204:	08005239 	.word	0x08005239
 8005208:	08005249 	.word	0x08005249
 800520c:	08005249 	.word	0x08005249
 8005210:	08005249 	.word	0x08005249
 8005214:	08005231 	.word	0x08005231
 8005218:	08005249 	.word	0x08005249
 800521c:	08005249 	.word	0x08005249
 8005220:	08005249 	.word	0x08005249
 8005224:	08005241 	.word	0x08005241
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522e:	e0d8      	b.n	80053e2 <UART_SetConfig+0x2e6>
 8005230:	2302      	movs	r3, #2
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005236:	e0d4      	b.n	80053e2 <UART_SetConfig+0x2e6>
 8005238:	2304      	movs	r3, #4
 800523a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523e:	e0d0      	b.n	80053e2 <UART_SetConfig+0x2e6>
 8005240:	2308      	movs	r3, #8
 8005242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005246:	e0cc      	b.n	80053e2 <UART_SetConfig+0x2e6>
 8005248:	2310      	movs	r3, #16
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524e:	e0c8      	b.n	80053e2 <UART_SetConfig+0x2e6>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a5e      	ldr	r2, [pc, #376]	; (80053d0 <UART_SetConfig+0x2d4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d125      	bne.n	80052a6 <UART_SetConfig+0x1aa>
 800525a:	4b5b      	ldr	r3, [pc, #364]	; (80053c8 <UART_SetConfig+0x2cc>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005264:	2b30      	cmp	r3, #48	; 0x30
 8005266:	d016      	beq.n	8005296 <UART_SetConfig+0x19a>
 8005268:	2b30      	cmp	r3, #48	; 0x30
 800526a:	d818      	bhi.n	800529e <UART_SetConfig+0x1a2>
 800526c:	2b20      	cmp	r3, #32
 800526e:	d00a      	beq.n	8005286 <UART_SetConfig+0x18a>
 8005270:	2b20      	cmp	r3, #32
 8005272:	d814      	bhi.n	800529e <UART_SetConfig+0x1a2>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <UART_SetConfig+0x182>
 8005278:	2b10      	cmp	r3, #16
 800527a:	d008      	beq.n	800528e <UART_SetConfig+0x192>
 800527c:	e00f      	b.n	800529e <UART_SetConfig+0x1a2>
 800527e:	2300      	movs	r3, #0
 8005280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005284:	e0ad      	b.n	80053e2 <UART_SetConfig+0x2e6>
 8005286:	2302      	movs	r3, #2
 8005288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528c:	e0a9      	b.n	80053e2 <UART_SetConfig+0x2e6>
 800528e:	2304      	movs	r3, #4
 8005290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005294:	e0a5      	b.n	80053e2 <UART_SetConfig+0x2e6>
 8005296:	2308      	movs	r3, #8
 8005298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529c:	e0a1      	b.n	80053e2 <UART_SetConfig+0x2e6>
 800529e:	2310      	movs	r3, #16
 80052a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a4:	e09d      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a4a      	ldr	r2, [pc, #296]	; (80053d4 <UART_SetConfig+0x2d8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d125      	bne.n	80052fc <UART_SetConfig+0x200>
 80052b0:	4b45      	ldr	r3, [pc, #276]	; (80053c8 <UART_SetConfig+0x2cc>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052ba:	2bc0      	cmp	r3, #192	; 0xc0
 80052bc:	d016      	beq.n	80052ec <UART_SetConfig+0x1f0>
 80052be:	2bc0      	cmp	r3, #192	; 0xc0
 80052c0:	d818      	bhi.n	80052f4 <UART_SetConfig+0x1f8>
 80052c2:	2b80      	cmp	r3, #128	; 0x80
 80052c4:	d00a      	beq.n	80052dc <UART_SetConfig+0x1e0>
 80052c6:	2b80      	cmp	r3, #128	; 0x80
 80052c8:	d814      	bhi.n	80052f4 <UART_SetConfig+0x1f8>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <UART_SetConfig+0x1d8>
 80052ce:	2b40      	cmp	r3, #64	; 0x40
 80052d0:	d008      	beq.n	80052e4 <UART_SetConfig+0x1e8>
 80052d2:	e00f      	b.n	80052f4 <UART_SetConfig+0x1f8>
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e082      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80052dc:	2302      	movs	r3, #2
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e2:	e07e      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80052e4:	2304      	movs	r3, #4
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ea:	e07a      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80052ec:	2308      	movs	r3, #8
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f2:	e076      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80052f4:	2310      	movs	r3, #16
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fa:	e072      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a35      	ldr	r2, [pc, #212]	; (80053d8 <UART_SetConfig+0x2dc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d12a      	bne.n	800535c <UART_SetConfig+0x260>
 8005306:	4b30      	ldr	r3, [pc, #192]	; (80053c8 <UART_SetConfig+0x2cc>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005314:	d01a      	beq.n	800534c <UART_SetConfig+0x250>
 8005316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531a:	d81b      	bhi.n	8005354 <UART_SetConfig+0x258>
 800531c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005320:	d00c      	beq.n	800533c <UART_SetConfig+0x240>
 8005322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005326:	d815      	bhi.n	8005354 <UART_SetConfig+0x258>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <UART_SetConfig+0x238>
 800532c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005330:	d008      	beq.n	8005344 <UART_SetConfig+0x248>
 8005332:	e00f      	b.n	8005354 <UART_SetConfig+0x258>
 8005334:	2300      	movs	r3, #0
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533a:	e052      	b.n	80053e2 <UART_SetConfig+0x2e6>
 800533c:	2302      	movs	r3, #2
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005342:	e04e      	b.n	80053e2 <UART_SetConfig+0x2e6>
 8005344:	2304      	movs	r3, #4
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534a:	e04a      	b.n	80053e2 <UART_SetConfig+0x2e6>
 800534c:	2308      	movs	r3, #8
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005352:	e046      	b.n	80053e2 <UART_SetConfig+0x2e6>
 8005354:	2310      	movs	r3, #16
 8005356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535a:	e042      	b.n	80053e2 <UART_SetConfig+0x2e6>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <UART_SetConfig+0x2c4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d13a      	bne.n	80053dc <UART_SetConfig+0x2e0>
 8005366:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <UART_SetConfig+0x2cc>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005370:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005374:	d01a      	beq.n	80053ac <UART_SetConfig+0x2b0>
 8005376:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800537a:	d81b      	bhi.n	80053b4 <UART_SetConfig+0x2b8>
 800537c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005380:	d00c      	beq.n	800539c <UART_SetConfig+0x2a0>
 8005382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005386:	d815      	bhi.n	80053b4 <UART_SetConfig+0x2b8>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <UART_SetConfig+0x298>
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	d008      	beq.n	80053a4 <UART_SetConfig+0x2a8>
 8005392:	e00f      	b.n	80053b4 <UART_SetConfig+0x2b8>
 8005394:	2300      	movs	r3, #0
 8005396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539a:	e022      	b.n	80053e2 <UART_SetConfig+0x2e6>
 800539c:	2302      	movs	r3, #2
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a2:	e01e      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053aa:	e01a      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b2:	e016      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ba:	e012      	b.n	80053e2 <UART_SetConfig+0x2e6>
 80053bc:	efff69f3 	.word	0xefff69f3
 80053c0:	40008000 	.word	0x40008000
 80053c4:	40013800 	.word	0x40013800
 80053c8:	40021000 	.word	0x40021000
 80053cc:	40004400 	.word	0x40004400
 80053d0:	40004800 	.word	0x40004800
 80053d4:	40004c00 	.word	0x40004c00
 80053d8:	40005000 	.word	0x40005000
 80053dc:	2310      	movs	r3, #16
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a9f      	ldr	r2, [pc, #636]	; (8005664 <UART_SetConfig+0x568>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d17a      	bne.n	80054e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d824      	bhi.n	800543e <UART_SetConfig+0x342>
 80053f4:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0x300>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005421 	.word	0x08005421
 8005400:	0800543f 	.word	0x0800543f
 8005404:	08005429 	.word	0x08005429
 8005408:	0800543f 	.word	0x0800543f
 800540c:	0800542f 	.word	0x0800542f
 8005410:	0800543f 	.word	0x0800543f
 8005414:	0800543f 	.word	0x0800543f
 8005418:	0800543f 	.word	0x0800543f
 800541c:	08005437 	.word	0x08005437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005420:	f7fe fcfa 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
 8005424:	61f8      	str	r0, [r7, #28]
        break;
 8005426:	e010      	b.n	800544a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005428:	4b8f      	ldr	r3, [pc, #572]	; (8005668 <UART_SetConfig+0x56c>)
 800542a:	61fb      	str	r3, [r7, #28]
        break;
 800542c:	e00d      	b.n	800544a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542e:	f7fe fc5b 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8005432:	61f8      	str	r0, [r7, #28]
        break;
 8005434:	e009      	b.n	800544a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543a:	61fb      	str	r3, [r7, #28]
        break;
 800543c:	e005      	b.n	800544a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005448:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80fb 	beq.w	8005648 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4413      	add	r3, r2
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	429a      	cmp	r2, r3
 8005460:	d305      	bcc.n	800546e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	429a      	cmp	r2, r3
 800546c:	d903      	bls.n	8005476 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005474:	e0e8      	b.n	8005648 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2200      	movs	r2, #0
 800547a:	461c      	mov	r4, r3
 800547c:	4615      	mov	r5, r2
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	022b      	lsls	r3, r5, #8
 8005488:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800548c:	0222      	lsls	r2, r4, #8
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	6849      	ldr	r1, [r1, #4]
 8005492:	0849      	lsrs	r1, r1, #1
 8005494:	2000      	movs	r0, #0
 8005496:	4688      	mov	r8, r1
 8005498:	4681      	mov	r9, r0
 800549a:	eb12 0a08 	adds.w	sl, r2, r8
 800549e:	eb43 0b09 	adc.w	fp, r3, r9
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b0:	4650      	mov	r0, sl
 80054b2:	4659      	mov	r1, fp
 80054b4:	f7fa fe90 	bl	80001d8 <__aeabi_uldivmod>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4613      	mov	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c6:	d308      	bcc.n	80054da <UART_SetConfig+0x3de>
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ce:	d204      	bcs.n	80054da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	60da      	str	r2, [r3, #12]
 80054d8:	e0b6      	b.n	8005648 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054e0:	e0b2      	b.n	8005648 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ea:	d15e      	bne.n	80055aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80054ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d828      	bhi.n	8005546 <UART_SetConfig+0x44a>
 80054f4:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <UART_SetConfig+0x400>)
 80054f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fa:	bf00      	nop
 80054fc:	08005521 	.word	0x08005521
 8005500:	08005529 	.word	0x08005529
 8005504:	08005531 	.word	0x08005531
 8005508:	08005547 	.word	0x08005547
 800550c:	08005537 	.word	0x08005537
 8005510:	08005547 	.word	0x08005547
 8005514:	08005547 	.word	0x08005547
 8005518:	08005547 	.word	0x08005547
 800551c:	0800553f 	.word	0x0800553f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005520:	f7fe fc7a 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
 8005524:	61f8      	str	r0, [r7, #28]
        break;
 8005526:	e014      	b.n	8005552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005528:	f7fe fc8c 	bl	8003e44 <HAL_RCC_GetPCLK2Freq>
 800552c:	61f8      	str	r0, [r7, #28]
        break;
 800552e:	e010      	b.n	8005552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005530:	4b4d      	ldr	r3, [pc, #308]	; (8005668 <UART_SetConfig+0x56c>)
 8005532:	61fb      	str	r3, [r7, #28]
        break;
 8005534:	e00d      	b.n	8005552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005536:	f7fe fbd7 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 800553a:	61f8      	str	r0, [r7, #28]
        break;
 800553c:	e009      	b.n	8005552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005542:	61fb      	str	r3, [r7, #28]
        break;
 8005544:	e005      	b.n	8005552 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d077      	beq.n	8005648 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	005a      	lsls	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	085b      	lsrs	r3, r3, #1
 8005562:	441a      	add	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b0f      	cmp	r3, #15
 8005572:	d916      	bls.n	80055a2 <UART_SetConfig+0x4a6>
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557a:	d212      	bcs.n	80055a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	b29b      	uxth	r3, r3
 8005580:	f023 030f 	bic.w	r3, r3, #15
 8005584:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	b29b      	uxth	r3, r3
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	b29a      	uxth	r2, r3
 8005592:	8afb      	ldrh	r3, [r7, #22]
 8005594:	4313      	orrs	r3, r2
 8005596:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	8afa      	ldrh	r2, [r7, #22]
 800559e:	60da      	str	r2, [r3, #12]
 80055a0:	e052      	b.n	8005648 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055a8:	e04e      	b.n	8005648 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d827      	bhi.n	8005602 <UART_SetConfig+0x506>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0x4bc>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055e5 	.word	0x080055e5
 80055c0:	080055ed 	.word	0x080055ed
 80055c4:	08005603 	.word	0x08005603
 80055c8:	080055f3 	.word	0x080055f3
 80055cc:	08005603 	.word	0x08005603
 80055d0:	08005603 	.word	0x08005603
 80055d4:	08005603 	.word	0x08005603
 80055d8:	080055fb 	.word	0x080055fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055dc:	f7fe fc1c 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
 80055e0:	61f8      	str	r0, [r7, #28]
        break;
 80055e2:	e014      	b.n	800560e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e4:	f7fe fc2e 	bl	8003e44 <HAL_RCC_GetPCLK2Freq>
 80055e8:	61f8      	str	r0, [r7, #28]
        break;
 80055ea:	e010      	b.n	800560e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ec:	4b1e      	ldr	r3, [pc, #120]	; (8005668 <UART_SetConfig+0x56c>)
 80055ee:	61fb      	str	r3, [r7, #28]
        break;
 80055f0:	e00d      	b.n	800560e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f2:	f7fe fb79 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 80055f6:	61f8      	str	r0, [r7, #28]
        break;
 80055f8:	e009      	b.n	800560e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fe:	61fb      	str	r3, [r7, #28]
        break;
 8005600:	e005      	b.n	800560e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800560c:	bf00      	nop
    }

    if (pclk != 0U)
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d019      	beq.n	8005648 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	085a      	lsrs	r2, r3, #1
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	441a      	add	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b0f      	cmp	r3, #15
 800562c:	d909      	bls.n	8005642 <UART_SetConfig+0x546>
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d205      	bcs.n	8005642 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60da      	str	r2, [r3, #12]
 8005640:	e002      	b.n	8005648 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005654:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005658:	4618      	mov	r0, r3
 800565a:	3728      	adds	r7, #40	; 0x28
 800565c:	46bd      	mov	sp, r7
 800565e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005662:	bf00      	nop
 8005664:	40008000 	.word	0x40008000
 8005668:	00f42400 	.word	0x00f42400

0800566c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01a      	beq.n	8005782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576a:	d10a      	bne.n	8005782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]
  }
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b098      	sub	sp, #96	; 0x60
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057c0:	f7fc fff0 	bl	80027a4 <HAL_GetTick>
 80057c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d12e      	bne.n	8005832 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057dc:	2200      	movs	r2, #0
 80057de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f88c 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d021      	beq.n	8005832 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005802:	653b      	str	r3, [r7, #80]	; 0x50
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580c:	647b      	str	r3, [r7, #68]	; 0x44
 800580e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e6      	bne.n	80057ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e062      	b.n	80058f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d149      	bne.n	80058d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005848:	2200      	movs	r2, #0
 800584a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f856 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d03c      	beq.n	80058d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	623b      	str	r3, [r7, #32]
   return(result);
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800586e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005878:	633b      	str	r3, [r7, #48]	; 0x30
 800587a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800587e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e6      	bne.n	800585a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	60fb      	str	r3, [r7, #12]
   return(result);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058ac:	61fa      	str	r2, [r7, #28]
 80058ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	69b9      	ldr	r1, [r7, #24]
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	617b      	str	r3, [r7, #20]
   return(result);
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e011      	b.n	80058f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3758      	adds	r7, #88	; 0x58
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005910:	e049      	b.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d045      	beq.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591a:	f7fc ff43 	bl	80027a4 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <UART_WaitOnFlagUntilTimeout+0x30>
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e048      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	d031      	beq.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b08      	cmp	r3, #8
 800594e:	d110      	bne.n	8005972 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2208      	movs	r2, #8
 8005956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f8ff 	bl	8005b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2208      	movs	r2, #8
 8005962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e029      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800597c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005980:	d111      	bne.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800598a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f8e5 	bl	8005b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e00f      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4013      	ands	r3, r2
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d0a6      	beq.n	8005912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b096      	sub	sp, #88	; 0x58
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	4613      	mov	r3, r2
 80059dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2222      	movs	r2, #34	; 0x22
 80059f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d028      	beq.n	8005a56 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a08:	4a3e      	ldr	r2, [pc, #248]	; (8005b04 <UART_Start_Receive_DMA+0x134>)
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a10:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <UART_Start_Receive_DMA+0x138>)
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a18:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <UART_Start_Receive_DMA+0x13c>)
 8005a1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a20:	2200      	movs	r2, #0
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3324      	adds	r3, #36	; 0x24
 8005a2e:	4619      	mov	r1, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	461a      	mov	r2, r3
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	f7fd f8ae 	bl	8002b98 <HAL_DMA_Start_IT>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2210      	movs	r2, #16
 8005a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e051      	b.n	8005afa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d018      	beq.n	8005a90 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a72:	657b      	str	r3, [r7, #84]	; 0x54
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a7e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e6      	bne.n	8005a5e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3308      	adds	r3, #8
 8005aae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ab0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ab2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e5      	bne.n	8005a90 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ae4:	623a      	str	r2, [r7, #32]
 8005ae6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	69f9      	ldr	r1, [r7, #28]
 8005aea:	6a3a      	ldr	r2, [r7, #32]
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e5      	bne.n	8005ac4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3758      	adds	r7, #88	; 0x58
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	08005cdb 	.word	0x08005cdb
 8005b08:	08005e07 	.word	0x08005e07
 8005b0c:	08005e45 	.word	0x08005e45

08005b10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b089      	sub	sp, #36	; 0x24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6979      	ldr	r1, [r7, #20]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	613b      	str	r3, [r7, #16]
   return(result);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e6      	bne.n	8005b18 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005b50:	bf00      	nop
 8005b52:	3724      	adds	r7, #36	; 0x24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b095      	sub	sp, #84	; 0x54
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b82:	643b      	str	r3, [r7, #64]	; 0x40
 8005b84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e6      	bne.n	8005b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d118      	bne.n	8005c04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f023 0310 	bic.w	r3, r3, #16
 8005be6:	647b      	str	r3, [r7, #68]	; 0x44
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	6979      	ldr	r1, [r7, #20]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e6      	bne.n	8005bd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c18:	bf00      	nop
 8005c1a:	3754      	adds	r7, #84	; 0x54
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b090      	sub	sp, #64	; 0x40
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d137      	bne.n	8005cb0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	623b      	str	r3, [r7, #32]
   return(result);
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c68:	633a      	str	r2, [r7, #48]	; 0x30
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e5      	bne.n	8005c48 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
 8005c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	69b9      	ldr	r1, [r7, #24]
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e6      	bne.n	8005c7c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cae:	e002      	b.n	8005cb6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005cb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005cb2:	f7fb fdc5 	bl	8001840 <HAL_UART_TxCpltCallback>
}
 8005cb6:	bf00      	nop
 8005cb8:	3740      	adds	r7, #64	; 0x40
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7ff f9eb 	bl	80050a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b09c      	sub	sp, #112	; 0x70
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d171      	bne.n	8005dda <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e6      	bne.n	8005cfe <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d42:	f023 0301 	bic.w	r3, r3, #1
 8005d46:	667b      	str	r3, [r7, #100]	; 0x64
 8005d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d50:	647a      	str	r2, [r7, #68]	; 0x44
 8005d52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	623b      	str	r3, [r7, #32]
   return(result);
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3308      	adds	r3, #8
 8005d82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d84:	633a      	str	r2, [r7, #48]	; 0x30
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e5      	bne.n	8005d64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d118      	bne.n	8005dda <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f023 0310 	bic.w	r3, r3, #16
 8005dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	69b9      	ldr	r1, [r7, #24]
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e6      	bne.n	8005da8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ddc:	2200      	movs	r2, #0
 8005dde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d107      	bne.n	8005df8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005dee:	4619      	mov	r1, r3
 8005df0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005df2:	f7ff f977 	bl	80050e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005df6:	e002      	b.n	8005dfe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005df8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005dfa:	f7fb fd33 	bl	8001864 <HAL_UART_RxCpltCallback>
}
 8005dfe:	bf00      	nop
 8005e00:	3770      	adds	r7, #112	; 0x70
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d109      	bne.n	8005e36 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff f958 	bl	80050e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e34:	e002      	b.n	8005e3c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff f940 	bl	80050bc <HAL_UART_RxHalfCpltCallback>
}
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e56:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d109      	bne.n	8005e82 <UART_DMAError+0x3e>
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b21      	cmp	r3, #33	; 0x21
 8005e72:	d106      	bne.n	8005e82 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005e7c:	6978      	ldr	r0, [r7, #20]
 8005e7e:	f7ff fe47 	bl	8005b10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b40      	cmp	r3, #64	; 0x40
 8005e8e:	d109      	bne.n	8005ea4 <UART_DMAError+0x60>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b22      	cmp	r3, #34	; 0x22
 8005e94:	d106      	bne.n	8005ea4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005e9e:	6978      	ldr	r0, [r7, #20]
 8005ea0:	f7ff fe5c 	bl	8005b5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eaa:	f043 0210 	orr.w	r2, r3, #16
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eb4:	6978      	ldr	r0, [r7, #20]
 8005eb6:	f7ff f90b 	bl	80050d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f7ff f8f5 	bl	80050d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b088      	sub	sp, #32
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	6979      	ldr	r1, [r7, #20]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	613b      	str	r3, [r7, #16]
   return(result);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e6      	bne.n	8005ef6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7fb fc83 	bl	8001840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f3a:	bf00      	nop
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <realloc>:
 8005f58:	4b02      	ldr	r3, [pc, #8]	; (8005f64 <realloc+0xc>)
 8005f5a:	460a      	mov	r2, r1
 8005f5c:	4601      	mov	r1, r0
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	f000 b802 	b.w	8005f68 <_realloc_r>
 8005f64:	2000007c 	.word	0x2000007c

08005f68 <_realloc_r>:
 8005f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	4614      	mov	r4, r2
 8005f70:	460e      	mov	r6, r1
 8005f72:	b921      	cbnz	r1, 8005f7e <_realloc_r+0x16>
 8005f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f78:	4611      	mov	r1, r2
 8005f7a:	f000 b8d3 	b.w	8006124 <_malloc_r>
 8005f7e:	b92a      	cbnz	r2, 8005f8c <_realloc_r+0x24>
 8005f80:	f000 f864 	bl	800604c <_free_r>
 8005f84:	4625      	mov	r5, r4
 8005f86:	4628      	mov	r0, r5
 8005f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f8c:	f000 f956 	bl	800623c <_malloc_usable_size_r>
 8005f90:	4284      	cmp	r4, r0
 8005f92:	4607      	mov	r7, r0
 8005f94:	d802      	bhi.n	8005f9c <_realloc_r+0x34>
 8005f96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f9a:	d812      	bhi.n	8005fc2 <_realloc_r+0x5a>
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	f000 f8c0 	bl	8006124 <_malloc_r>
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d0ed      	beq.n	8005f86 <_realloc_r+0x1e>
 8005faa:	42bc      	cmp	r4, r7
 8005fac:	4622      	mov	r2, r4
 8005fae:	4631      	mov	r1, r6
 8005fb0:	bf28      	it	cs
 8005fb2:	463a      	movcs	r2, r7
 8005fb4:	f000 f83c 	bl	8006030 <memcpy>
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4640      	mov	r0, r8
 8005fbc:	f000 f846 	bl	800604c <_free_r>
 8005fc0:	e7e1      	b.n	8005f86 <_realloc_r+0x1e>
 8005fc2:	4635      	mov	r5, r6
 8005fc4:	e7df      	b.n	8005f86 <_realloc_r+0x1e>

08005fc6 <memset>:
 8005fc6:	4402      	add	r2, r0
 8005fc8:	4603      	mov	r3, r0
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d100      	bne.n	8005fd0 <memset+0xa>
 8005fce:	4770      	bx	lr
 8005fd0:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd4:	e7f9      	b.n	8005fca <memset+0x4>
	...

08005fd8 <__errno>:
 8005fd8:	4b01      	ldr	r3, [pc, #4]	; (8005fe0 <__errno+0x8>)
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	2000007c 	.word	0x2000007c

08005fe4 <__libc_init_array>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	4d0d      	ldr	r5, [pc, #52]	; (800601c <__libc_init_array+0x38>)
 8005fe8:	4c0d      	ldr	r4, [pc, #52]	; (8006020 <__libc_init_array+0x3c>)
 8005fea:	1b64      	subs	r4, r4, r5
 8005fec:	10a4      	asrs	r4, r4, #2
 8005fee:	2600      	movs	r6, #0
 8005ff0:	42a6      	cmp	r6, r4
 8005ff2:	d109      	bne.n	8006008 <__libc_init_array+0x24>
 8005ff4:	4d0b      	ldr	r5, [pc, #44]	; (8006024 <__libc_init_array+0x40>)
 8005ff6:	4c0c      	ldr	r4, [pc, #48]	; (8006028 <__libc_init_array+0x44>)
 8005ff8:	f000 f938 	bl	800626c <_init>
 8005ffc:	1b64      	subs	r4, r4, r5
 8005ffe:	10a4      	asrs	r4, r4, #2
 8006000:	2600      	movs	r6, #0
 8006002:	42a6      	cmp	r6, r4
 8006004:	d105      	bne.n	8006012 <__libc_init_array+0x2e>
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	f855 3b04 	ldr.w	r3, [r5], #4
 800600c:	4798      	blx	r3
 800600e:	3601      	adds	r6, #1
 8006010:	e7ee      	b.n	8005ff0 <__libc_init_array+0xc>
 8006012:	f855 3b04 	ldr.w	r3, [r5], #4
 8006016:	4798      	blx	r3
 8006018:	3601      	adds	r6, #1
 800601a:	e7f2      	b.n	8006002 <__libc_init_array+0x1e>
 800601c:	080064f4 	.word	0x080064f4
 8006020:	080064f4 	.word	0x080064f4
 8006024:	080064f4 	.word	0x080064f4
 8006028:	080064fc 	.word	0x080064fc

0800602c <__retarget_lock_acquire_recursive>:
 800602c:	4770      	bx	lr

0800602e <__retarget_lock_release_recursive>:
 800602e:	4770      	bx	lr

08006030 <memcpy>:
 8006030:	440a      	add	r2, r1
 8006032:	4291      	cmp	r1, r2
 8006034:	f100 33ff 	add.w	r3, r0, #4294967295
 8006038:	d100      	bne.n	800603c <memcpy+0xc>
 800603a:	4770      	bx	lr
 800603c:	b510      	push	{r4, lr}
 800603e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006042:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006046:	4291      	cmp	r1, r2
 8006048:	d1f9      	bne.n	800603e <memcpy+0xe>
 800604a:	bd10      	pop	{r4, pc}

0800604c <_free_r>:
 800604c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800604e:	2900      	cmp	r1, #0
 8006050:	d044      	beq.n	80060dc <_free_r+0x90>
 8006052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006056:	9001      	str	r0, [sp, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f1a1 0404 	sub.w	r4, r1, #4
 800605e:	bfb8      	it	lt
 8006060:	18e4      	addlt	r4, r4, r3
 8006062:	f000 f8df 	bl	8006224 <__malloc_lock>
 8006066:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <_free_r+0x94>)
 8006068:	9801      	ldr	r0, [sp, #4]
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	b933      	cbnz	r3, 800607c <_free_r+0x30>
 800606e:	6063      	str	r3, [r4, #4]
 8006070:	6014      	str	r4, [r2, #0]
 8006072:	b003      	add	sp, #12
 8006074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006078:	f000 b8da 	b.w	8006230 <__malloc_unlock>
 800607c:	42a3      	cmp	r3, r4
 800607e:	d908      	bls.n	8006092 <_free_r+0x46>
 8006080:	6825      	ldr	r5, [r4, #0]
 8006082:	1961      	adds	r1, r4, r5
 8006084:	428b      	cmp	r3, r1
 8006086:	bf01      	itttt	eq
 8006088:	6819      	ldreq	r1, [r3, #0]
 800608a:	685b      	ldreq	r3, [r3, #4]
 800608c:	1949      	addeq	r1, r1, r5
 800608e:	6021      	streq	r1, [r4, #0]
 8006090:	e7ed      	b.n	800606e <_free_r+0x22>
 8006092:	461a      	mov	r2, r3
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	b10b      	cbz	r3, 800609c <_free_r+0x50>
 8006098:	42a3      	cmp	r3, r4
 800609a:	d9fa      	bls.n	8006092 <_free_r+0x46>
 800609c:	6811      	ldr	r1, [r2, #0]
 800609e:	1855      	adds	r5, r2, r1
 80060a0:	42a5      	cmp	r5, r4
 80060a2:	d10b      	bne.n	80060bc <_free_r+0x70>
 80060a4:	6824      	ldr	r4, [r4, #0]
 80060a6:	4421      	add	r1, r4
 80060a8:	1854      	adds	r4, r2, r1
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	d1e0      	bne.n	8006072 <_free_r+0x26>
 80060b0:	681c      	ldr	r4, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	6053      	str	r3, [r2, #4]
 80060b6:	440c      	add	r4, r1
 80060b8:	6014      	str	r4, [r2, #0]
 80060ba:	e7da      	b.n	8006072 <_free_r+0x26>
 80060bc:	d902      	bls.n	80060c4 <_free_r+0x78>
 80060be:	230c      	movs	r3, #12
 80060c0:	6003      	str	r3, [r0, #0]
 80060c2:	e7d6      	b.n	8006072 <_free_r+0x26>
 80060c4:	6825      	ldr	r5, [r4, #0]
 80060c6:	1961      	adds	r1, r4, r5
 80060c8:	428b      	cmp	r3, r1
 80060ca:	bf04      	itt	eq
 80060cc:	6819      	ldreq	r1, [r3, #0]
 80060ce:	685b      	ldreq	r3, [r3, #4]
 80060d0:	6063      	str	r3, [r4, #4]
 80060d2:	bf04      	itt	eq
 80060d4:	1949      	addeq	r1, r1, r5
 80060d6:	6021      	streq	r1, [r4, #0]
 80060d8:	6054      	str	r4, [r2, #4]
 80060da:	e7ca      	b.n	8006072 <_free_r+0x26>
 80060dc:	b003      	add	sp, #12
 80060de:	bd30      	pop	{r4, r5, pc}
 80060e0:	20000c58 	.word	0x20000c58

080060e4 <sbrk_aligned>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4e0e      	ldr	r6, [pc, #56]	; (8006120 <sbrk_aligned+0x3c>)
 80060e8:	460c      	mov	r4, r1
 80060ea:	6831      	ldr	r1, [r6, #0]
 80060ec:	4605      	mov	r5, r0
 80060ee:	b911      	cbnz	r1, 80060f6 <sbrk_aligned+0x12>
 80060f0:	f000 f8ac 	bl	800624c <_sbrk_r>
 80060f4:	6030      	str	r0, [r6, #0]
 80060f6:	4621      	mov	r1, r4
 80060f8:	4628      	mov	r0, r5
 80060fa:	f000 f8a7 	bl	800624c <_sbrk_r>
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	d00a      	beq.n	8006118 <sbrk_aligned+0x34>
 8006102:	1cc4      	adds	r4, r0, #3
 8006104:	f024 0403 	bic.w	r4, r4, #3
 8006108:	42a0      	cmp	r0, r4
 800610a:	d007      	beq.n	800611c <sbrk_aligned+0x38>
 800610c:	1a21      	subs	r1, r4, r0
 800610e:	4628      	mov	r0, r5
 8006110:	f000 f89c 	bl	800624c <_sbrk_r>
 8006114:	3001      	adds	r0, #1
 8006116:	d101      	bne.n	800611c <sbrk_aligned+0x38>
 8006118:	f04f 34ff 	mov.w	r4, #4294967295
 800611c:	4620      	mov	r0, r4
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	20000c5c 	.word	0x20000c5c

08006124 <_malloc_r>:
 8006124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006128:	1ccd      	adds	r5, r1, #3
 800612a:	f025 0503 	bic.w	r5, r5, #3
 800612e:	3508      	adds	r5, #8
 8006130:	2d0c      	cmp	r5, #12
 8006132:	bf38      	it	cc
 8006134:	250c      	movcc	r5, #12
 8006136:	2d00      	cmp	r5, #0
 8006138:	4607      	mov	r7, r0
 800613a:	db01      	blt.n	8006140 <_malloc_r+0x1c>
 800613c:	42a9      	cmp	r1, r5
 800613e:	d905      	bls.n	800614c <_malloc_r+0x28>
 8006140:	230c      	movs	r3, #12
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	2600      	movs	r6, #0
 8006146:	4630      	mov	r0, r6
 8006148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006220 <_malloc_r+0xfc>
 8006150:	f000 f868 	bl	8006224 <__malloc_lock>
 8006154:	f8d8 3000 	ldr.w	r3, [r8]
 8006158:	461c      	mov	r4, r3
 800615a:	bb5c      	cbnz	r4, 80061b4 <_malloc_r+0x90>
 800615c:	4629      	mov	r1, r5
 800615e:	4638      	mov	r0, r7
 8006160:	f7ff ffc0 	bl	80060e4 <sbrk_aligned>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	4604      	mov	r4, r0
 8006168:	d155      	bne.n	8006216 <_malloc_r+0xf2>
 800616a:	f8d8 4000 	ldr.w	r4, [r8]
 800616e:	4626      	mov	r6, r4
 8006170:	2e00      	cmp	r6, #0
 8006172:	d145      	bne.n	8006200 <_malloc_r+0xdc>
 8006174:	2c00      	cmp	r4, #0
 8006176:	d048      	beq.n	800620a <_malloc_r+0xe6>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	4631      	mov	r1, r6
 800617c:	4638      	mov	r0, r7
 800617e:	eb04 0903 	add.w	r9, r4, r3
 8006182:	f000 f863 	bl	800624c <_sbrk_r>
 8006186:	4581      	cmp	r9, r0
 8006188:	d13f      	bne.n	800620a <_malloc_r+0xe6>
 800618a:	6821      	ldr	r1, [r4, #0]
 800618c:	1a6d      	subs	r5, r5, r1
 800618e:	4629      	mov	r1, r5
 8006190:	4638      	mov	r0, r7
 8006192:	f7ff ffa7 	bl	80060e4 <sbrk_aligned>
 8006196:	3001      	adds	r0, #1
 8006198:	d037      	beq.n	800620a <_malloc_r+0xe6>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	442b      	add	r3, r5
 800619e:	6023      	str	r3, [r4, #0]
 80061a0:	f8d8 3000 	ldr.w	r3, [r8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d038      	beq.n	800621a <_malloc_r+0xf6>
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	42a2      	cmp	r2, r4
 80061ac:	d12b      	bne.n	8006206 <_malloc_r+0xe2>
 80061ae:	2200      	movs	r2, #0
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	e00f      	b.n	80061d4 <_malloc_r+0xb0>
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	1b52      	subs	r2, r2, r5
 80061b8:	d41f      	bmi.n	80061fa <_malloc_r+0xd6>
 80061ba:	2a0b      	cmp	r2, #11
 80061bc:	d917      	bls.n	80061ee <_malloc_r+0xca>
 80061be:	1961      	adds	r1, r4, r5
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	6025      	str	r5, [r4, #0]
 80061c4:	bf18      	it	ne
 80061c6:	6059      	strne	r1, [r3, #4]
 80061c8:	6863      	ldr	r3, [r4, #4]
 80061ca:	bf08      	it	eq
 80061cc:	f8c8 1000 	streq.w	r1, [r8]
 80061d0:	5162      	str	r2, [r4, r5]
 80061d2:	604b      	str	r3, [r1, #4]
 80061d4:	4638      	mov	r0, r7
 80061d6:	f104 060b 	add.w	r6, r4, #11
 80061da:	f000 f829 	bl	8006230 <__malloc_unlock>
 80061de:	f026 0607 	bic.w	r6, r6, #7
 80061e2:	1d23      	adds	r3, r4, #4
 80061e4:	1af2      	subs	r2, r6, r3
 80061e6:	d0ae      	beq.n	8006146 <_malloc_r+0x22>
 80061e8:	1b9b      	subs	r3, r3, r6
 80061ea:	50a3      	str	r3, [r4, r2]
 80061ec:	e7ab      	b.n	8006146 <_malloc_r+0x22>
 80061ee:	42a3      	cmp	r3, r4
 80061f0:	6862      	ldr	r2, [r4, #4]
 80061f2:	d1dd      	bne.n	80061b0 <_malloc_r+0x8c>
 80061f4:	f8c8 2000 	str.w	r2, [r8]
 80061f8:	e7ec      	b.n	80061d4 <_malloc_r+0xb0>
 80061fa:	4623      	mov	r3, r4
 80061fc:	6864      	ldr	r4, [r4, #4]
 80061fe:	e7ac      	b.n	800615a <_malloc_r+0x36>
 8006200:	4634      	mov	r4, r6
 8006202:	6876      	ldr	r6, [r6, #4]
 8006204:	e7b4      	b.n	8006170 <_malloc_r+0x4c>
 8006206:	4613      	mov	r3, r2
 8006208:	e7cc      	b.n	80061a4 <_malloc_r+0x80>
 800620a:	230c      	movs	r3, #12
 800620c:	603b      	str	r3, [r7, #0]
 800620e:	4638      	mov	r0, r7
 8006210:	f000 f80e 	bl	8006230 <__malloc_unlock>
 8006214:	e797      	b.n	8006146 <_malloc_r+0x22>
 8006216:	6025      	str	r5, [r4, #0]
 8006218:	e7dc      	b.n	80061d4 <_malloc_r+0xb0>
 800621a:	605b      	str	r3, [r3, #4]
 800621c:	deff      	udf	#255	; 0xff
 800621e:	bf00      	nop
 8006220:	20000c58 	.word	0x20000c58

08006224 <__malloc_lock>:
 8006224:	4801      	ldr	r0, [pc, #4]	; (800622c <__malloc_lock+0x8>)
 8006226:	f7ff bf01 	b.w	800602c <__retarget_lock_acquire_recursive>
 800622a:	bf00      	nop
 800622c:	20000c54 	.word	0x20000c54

08006230 <__malloc_unlock>:
 8006230:	4801      	ldr	r0, [pc, #4]	; (8006238 <__malloc_unlock+0x8>)
 8006232:	f7ff befc 	b.w	800602e <__retarget_lock_release_recursive>
 8006236:	bf00      	nop
 8006238:	20000c54 	.word	0x20000c54

0800623c <_malloc_usable_size_r>:
 800623c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006240:	1f18      	subs	r0, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	bfbc      	itt	lt
 8006246:	580b      	ldrlt	r3, [r1, r0]
 8006248:	18c0      	addlt	r0, r0, r3
 800624a:	4770      	bx	lr

0800624c <_sbrk_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4d06      	ldr	r5, [pc, #24]	; (8006268 <_sbrk_r+0x1c>)
 8006250:	2300      	movs	r3, #0
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	f7fc f8a6 	bl	80023a8 <_sbrk>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_sbrk_r+0x1a>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_sbrk_r+0x1a>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000c50 	.word	0x20000c50

0800626c <_init>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	bf00      	nop
 8006270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006272:	bc08      	pop	{r3}
 8006274:	469e      	mov	lr, r3
 8006276:	4770      	bx	lr

08006278 <_fini>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr
